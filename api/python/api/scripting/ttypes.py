#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class CustomColumnType(object):
    String = 0
    Integer = 1
    Long = 2
    Double = 3
    Boolean = 4
    DateTime = 5

    _VALUES_TO_NAMES = {
        0: "String",
        1: "Integer",
        2: "Long",
        3: "Double",
        4: "Boolean",
        5: "DateTime",
    }

    _NAMES_TO_VALUES = {
        "String": 0,
        "Integer": 1,
        "Long": 2,
        "Double": 3,
        "Boolean": 4,
        "DateTime": 5,
    }


class Action(object):
    Include = 0
    Skip = 1
    Stub = 2

    _VALUES_TO_NAMES = {
        0: "Include",
        1: "Skip",
        2: "Stub",
    }

    _NAMES_TO_VALUES = {
        "Include": 0,
        "Skip": 1,
        "Stub": 2,
    }


class ScriptTZonedDateTime(object):
    """
    Attributes:
     - epochMili
     - zoneId

    """


    def __init__(self, epochMili=None, zoneId=None,):
        self.epochMili = epochMili
        self.zoneId = zoneId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.epochMili = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.zoneId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScriptTZonedDateTime')
        if self.epochMili is not None:
            oprot.writeFieldBegin('epochMili', TType.I64, 1)
            oprot.writeI64(self.epochMili)
            oprot.writeFieldEnd()
        if self.zoneId is not None:
            oprot.writeFieldBegin('zoneId', TType.STRING, 2)
            oprot.writeString(self.zoneId.encode('utf-8') if sys.version_info[0] == 2 else self.zoneId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RawDataEntry(object):
    """
    Attributes:
     - key
     - value

    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RawDataEntry')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PersonAccount(object):
    """
    Attributes:
     - name
     - contact

    """


    def __init__(self, name=None, contact=None,):
        self.name = name
        self.contact = contact

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.contact = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PersonAccount')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRING, 2)
            oprot.writeString(self.contact.encode('utf-8') if sys.version_info[0] == 2 else self.contact)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GeoLocation(object):
    """
    Attributes:
     - latitude
     - longitude

    """


    def __init__(self, latitude=None, longitude=None,):
        self.latitude = latitude
        self.longitude = longitude

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GeoLocation')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FoundItem(object):
    """
    Attributes:
     - id
     - fileName
     - uri
     - md5
     - size
     - mediaType
     - binaryFile

    """


    def __init__(self, id=None, fileName=None, uri=None, md5=None, size=None, mediaType=None, binaryFile=None,):
        self.id = id
        self.fileName = fileName
        self.uri = uri
        self.md5 = md5
        self.size = size
        self.mediaType = mediaType
        self.binaryFile = binaryFile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.uri = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.md5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mediaType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.binaryFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FoundItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 2)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 3)
            oprot.writeString(self.uri.encode('utf-8') if sys.version_info[0] == 2 else self.uri)
            oprot.writeFieldEnd()
        if self.md5 is not None:
            oprot.writeFieldBegin('md5', TType.STRING, 4)
            oprot.writeString(self.md5.encode('utf-8') if sys.version_info[0] == 2 else self.md5)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 5)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.STRING, 6)
            oprot.writeString(self.mediaType.encode('utf-8') if sys.version_info[0] == 2 else self.mediaType)
            oprot.writeFieldEnd()
        if self.binaryFile is not None:
            oprot.writeFieldBegin('binaryFile', TType.STRING, 51)
            oprot.writeString(self.binaryFile.encode('utf-8') if sys.version_info[0] == 2 else self.binaryFile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProcessedItem(object):
    """
    Attributes:
     - id
     - fileName
     - uri
     - md5
     - size
     - mediaType
     - encrypted
     - decrypted
     - password
     - certificate
     - rawData
     - contactName
     - nativeID
     - documentID
     - parentDocumentID
     - geoLocation
     - endAttach
     - textSnippet
     - recovered
     - orphan
     - embeddedImage
     - binaryFile
     - textFile
     - contentCreated
     - contentLastModified
     - contentLastAccessed
     - fileCreated
     - fileLastModified
     - fileLastAccessed
     - lastPrinted
     - sent
     - received
     - visited
     - called
     - started
     - ended
     - due
     - deleted
     - title
     - subject
     - pageCount
     - creators
     - contributors
     - organization
     - emptyDocument
     - messageID
     - messageHeaders
     - conversationIndexSet
     - messageFrom
     - messageSenders
     - messageTo
     - messageCc
     - messageBcc
     - chatSenders
     - chatReceivers
     - chatAccounts
     - isRead
     - durationSeconds
     - incomingPhoneNumbers
     - outgoingPhoneNumbers
     - allPhoneNumbers
     - sourceIP
     - messageCount
     - chatProtocol
     - chatConversationId
     - intellaChatConversationId
     - chatConversationTitle

    """


    def __init__(self, id=None, fileName=None, uri=None, md5=None, size=None, mediaType=None, encrypted=None, decrypted=None, password=None, certificate=None, rawData=None, contactName=None, nativeID=None, documentID=None, parentDocumentID=None, geoLocation=None, endAttach=None, textSnippet=None, recovered=None, orphan=None, embeddedImage=None, binaryFile=None, textFile=None, contentCreated=None, contentLastModified=None, contentLastAccessed=None, fileCreated=None, fileLastModified=None, fileLastAccessed=None, lastPrinted=None, sent=None, received=None, visited=None, called=None, started=None, ended=None, due=None, deleted=None, title=None, subject=None, pageCount=None, creators=None, contributors=None, organization=None, emptyDocument=None, messageID=None, messageHeaders=None, conversationIndexSet=None, messageFrom=None, messageSenders=None, messageTo=None, messageCc=None, messageBcc=None, chatSenders=None, chatReceivers=None, chatAccounts=None, isRead=None, durationSeconds=None, incomingPhoneNumbers=None, outgoingPhoneNumbers=None, allPhoneNumbers=None, sourceIP=None, messageCount=None, chatProtocol=None, chatConversationId=None, intellaChatConversationId=None, chatConversationTitle=None,):
        self.id = id
        self.fileName = fileName
        self.uri = uri
        self.md5 = md5
        self.size = size
        self.mediaType = mediaType
        self.encrypted = encrypted
        self.decrypted = decrypted
        self.password = password
        self.certificate = certificate
        self.rawData = rawData
        self.contactName = contactName
        self.nativeID = nativeID
        self.documentID = documentID
        self.parentDocumentID = parentDocumentID
        self.geoLocation = geoLocation
        self.endAttach = endAttach
        self.textSnippet = textSnippet
        self.recovered = recovered
        self.orphan = orphan
        self.embeddedImage = embeddedImage
        self.binaryFile = binaryFile
        self.textFile = textFile
        self.contentCreated = contentCreated
        self.contentLastModified = contentLastModified
        self.contentLastAccessed = contentLastAccessed
        self.fileCreated = fileCreated
        self.fileLastModified = fileLastModified
        self.fileLastAccessed = fileLastAccessed
        self.lastPrinted = lastPrinted
        self.sent = sent
        self.received = received
        self.visited = visited
        self.called = called
        self.started = started
        self.ended = ended
        self.due = due
        self.deleted = deleted
        self.title = title
        self.subject = subject
        self.pageCount = pageCount
        self.creators = creators
        self.contributors = contributors
        self.organization = organization
        self.emptyDocument = emptyDocument
        self.messageID = messageID
        self.messageHeaders = messageHeaders
        self.conversationIndexSet = conversationIndexSet
        self.messageFrom = messageFrom
        self.messageSenders = messageSenders
        self.messageTo = messageTo
        self.messageCc = messageCc
        self.messageBcc = messageBcc
        self.chatSenders = chatSenders
        self.chatReceivers = chatReceivers
        self.chatAccounts = chatAccounts
        self.isRead = isRead
        self.durationSeconds = durationSeconds
        self.incomingPhoneNumbers = incomingPhoneNumbers
        self.outgoingPhoneNumbers = outgoingPhoneNumbers
        self.allPhoneNumbers = allPhoneNumbers
        self.sourceIP = sourceIP
        self.messageCount = messageCount
        self.chatProtocol = chatProtocol
        self.chatConversationId = chatConversationId
        self.intellaChatConversationId = intellaChatConversationId
        self.chatConversationTitle = chatConversationTitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.uri = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.md5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mediaType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.encrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.decrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.rawData = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = RawDataEntry()
                        _elem5.read(iprot)
                        self.rawData.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.contactName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.nativeID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.documentID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.parentDocumentID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.geoLocation = GeoLocation()
                    self.geoLocation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.endAttach = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.textSnippet = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.recovered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.orphan = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.embeddedImage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.binaryFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRING:
                    self.textFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.STRUCT:
                    self.contentCreated = ScriptTZonedDateTime()
                    self.contentCreated.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.STRUCT:
                    self.contentLastModified = ScriptTZonedDateTime()
                    self.contentLastModified.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.STRUCT:
                    self.contentLastAccessed = ScriptTZonedDateTime()
                    self.contentLastAccessed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.STRUCT:
                    self.fileCreated = ScriptTZonedDateTime()
                    self.fileCreated.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 105:
                if ftype == TType.STRUCT:
                    self.fileLastModified = ScriptTZonedDateTime()
                    self.fileLastModified.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 106:
                if ftype == TType.STRUCT:
                    self.fileLastAccessed = ScriptTZonedDateTime()
                    self.fileLastAccessed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 107:
                if ftype == TType.STRUCT:
                    self.lastPrinted = ScriptTZonedDateTime()
                    self.lastPrinted.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 108:
                if ftype == TType.STRUCT:
                    self.sent = ScriptTZonedDateTime()
                    self.sent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 109:
                if ftype == TType.STRUCT:
                    self.received = ScriptTZonedDateTime()
                    self.received.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.STRUCT:
                    self.visited = ScriptTZonedDateTime()
                    self.visited.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 111:
                if ftype == TType.STRUCT:
                    self.called = ScriptTZonedDateTime()
                    self.called.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 112:
                if ftype == TType.STRUCT:
                    self.started = ScriptTZonedDateTime()
                    self.started.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 113:
                if ftype == TType.STRUCT:
                    self.ended = ScriptTZonedDateTime()
                    self.ended.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 114:
                if ftype == TType.STRUCT:
                    self.due = ScriptTZonedDateTime()
                    self.due.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 115:
                if ftype == TType.STRUCT:
                    self.deleted = ScriptTZonedDateTime()
                    self.deleted.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 201:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 202:
                if ftype == TType.STRING:
                    self.subject = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 203:
                if ftype == TType.I32:
                    self.pageCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 204:
                if ftype == TType.LIST:
                    self.creators = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = PersonAccount()
                        _elem11.read(iprot)
                        self.creators.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 205:
                if ftype == TType.LIST:
                    self.contributors = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = PersonAccount()
                        _elem17.read(iprot)
                        self.contributors.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 206:
                if ftype == TType.STRING:
                    self.organization = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 207:
                if ftype == TType.BOOL:
                    self.emptyDocument = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 251:
                if ftype == TType.STRING:
                    self.messageID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 252:
                if ftype == TType.STRING:
                    self.messageHeaders = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 253:
                if ftype == TType.SET:
                    self.conversationIndexSet = set()
                    (_etype21, _size18) = iprot.readSetBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.conversationIndexSet.add(_elem23)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 254:
                if ftype == TType.SET:
                    self.messageFrom = set()
                    (_etype27, _size24) = iprot.readSetBegin()
                    for _i28 in range(_size24):
                        _elem29 = PersonAccount()
                        _elem29.read(iprot)
                        self.messageFrom.add(_elem29)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 255:
                if ftype == TType.SET:
                    self.messageSenders = set()
                    (_etype33, _size30) = iprot.readSetBegin()
                    for _i34 in range(_size30):
                        _elem35 = PersonAccount()
                        _elem35.read(iprot)
                        self.messageSenders.add(_elem35)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 256:
                if ftype == TType.SET:
                    self.messageTo = set()
                    (_etype39, _size36) = iprot.readSetBegin()
                    for _i40 in range(_size36):
                        _elem41 = PersonAccount()
                        _elem41.read(iprot)
                        self.messageTo.add(_elem41)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 257:
                if ftype == TType.SET:
                    self.messageCc = set()
                    (_etype45, _size42) = iprot.readSetBegin()
                    for _i46 in range(_size42):
                        _elem47 = PersonAccount()
                        _elem47.read(iprot)
                        self.messageCc.add(_elem47)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 258:
                if ftype == TType.SET:
                    self.messageBcc = set()
                    (_etype51, _size48) = iprot.readSetBegin()
                    for _i52 in range(_size48):
                        _elem53 = PersonAccount()
                        _elem53.read(iprot)
                        self.messageBcc.add(_elem53)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 259:
                if ftype == TType.SET:
                    self.chatSenders = set()
                    (_etype57, _size54) = iprot.readSetBegin()
                    for _i58 in range(_size54):
                        _elem59 = PersonAccount()
                        _elem59.read(iprot)
                        self.chatSenders.add(_elem59)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 260:
                if ftype == TType.SET:
                    self.chatReceivers = set()
                    (_etype63, _size60) = iprot.readSetBegin()
                    for _i64 in range(_size60):
                        _elem65 = PersonAccount()
                        _elem65.read(iprot)
                        self.chatReceivers.add(_elem65)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 261:
                if ftype == TType.SET:
                    self.chatAccounts = set()
                    (_etype69, _size66) = iprot.readSetBegin()
                    for _i70 in range(_size66):
                        _elem71 = PersonAccount()
                        _elem71.read(iprot)
                        self.chatAccounts.add(_elem71)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 262:
                if ftype == TType.BOOL:
                    self.isRead = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 263:
                if ftype == TType.I32:
                    self.durationSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 264:
                if ftype == TType.SET:
                    self.incomingPhoneNumbers = set()
                    (_etype75, _size72) = iprot.readSetBegin()
                    for _i76 in range(_size72):
                        _elem77 = PersonAccount()
                        _elem77.read(iprot)
                        self.incomingPhoneNumbers.add(_elem77)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 265:
                if ftype == TType.SET:
                    self.outgoingPhoneNumbers = set()
                    (_etype81, _size78) = iprot.readSetBegin()
                    for _i82 in range(_size78):
                        _elem83 = PersonAccount()
                        _elem83.read(iprot)
                        self.outgoingPhoneNumbers.add(_elem83)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 266:
                if ftype == TType.SET:
                    self.allPhoneNumbers = set()
                    (_etype87, _size84) = iprot.readSetBegin()
                    for _i88 in range(_size84):
                        _elem89 = PersonAccount()
                        _elem89.read(iprot)
                        self.allPhoneNumbers.add(_elem89)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 267:
                if ftype == TType.STRING:
                    self.sourceIP = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 268:
                if ftype == TType.I32:
                    self.messageCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 269:
                if ftype == TType.SET:
                    self.chatProtocol = set()
                    (_etype93, _size90) = iprot.readSetBegin()
                    for _i94 in range(_size90):
                        _elem95 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.chatProtocol.add(_elem95)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 270:
                if ftype == TType.STRING:
                    self.chatConversationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 271:
                if ftype == TType.STRING:
                    self.intellaChatConversationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 272:
                if ftype == TType.STRING:
                    self.chatConversationTitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProcessedItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 2)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 3)
            oprot.writeString(self.uri.encode('utf-8') if sys.version_info[0] == 2 else self.uri)
            oprot.writeFieldEnd()
        if self.md5 is not None:
            oprot.writeFieldBegin('md5', TType.STRING, 4)
            oprot.writeString(self.md5.encode('utf-8') if sys.version_info[0] == 2 else self.md5)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 5)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.STRING, 6)
            oprot.writeString(self.mediaType.encode('utf-8') if sys.version_info[0] == 2 else self.mediaType)
            oprot.writeFieldEnd()
        if self.encrypted is not None:
            oprot.writeFieldBegin('encrypted', TType.BOOL, 7)
            oprot.writeBool(self.encrypted)
            oprot.writeFieldEnd()
        if self.decrypted is not None:
            oprot.writeFieldBegin('decrypted', TType.BOOL, 8)
            oprot.writeBool(self.decrypted)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 9)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 10)
            oprot.writeString(self.certificate.encode('utf-8') if sys.version_info[0] == 2 else self.certificate)
            oprot.writeFieldEnd()
        if self.rawData is not None:
            oprot.writeFieldBegin('rawData', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.rawData))
            for iter96 in self.rawData:
                iter96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contactName is not None:
            oprot.writeFieldBegin('contactName', TType.STRING, 12)
            oprot.writeString(self.contactName.encode('utf-8') if sys.version_info[0] == 2 else self.contactName)
            oprot.writeFieldEnd()
        if self.nativeID is not None:
            oprot.writeFieldBegin('nativeID', TType.STRING, 13)
            oprot.writeString(self.nativeID.encode('utf-8') if sys.version_info[0] == 2 else self.nativeID)
            oprot.writeFieldEnd()
        if self.documentID is not None:
            oprot.writeFieldBegin('documentID', TType.STRING, 14)
            oprot.writeString(self.documentID.encode('utf-8') if sys.version_info[0] == 2 else self.documentID)
            oprot.writeFieldEnd()
        if self.parentDocumentID is not None:
            oprot.writeFieldBegin('parentDocumentID', TType.STRING, 15)
            oprot.writeString(self.parentDocumentID.encode('utf-8') if sys.version_info[0] == 2 else self.parentDocumentID)
            oprot.writeFieldEnd()
        if self.geoLocation is not None:
            oprot.writeFieldBegin('geoLocation', TType.STRUCT, 16)
            self.geoLocation.write(oprot)
            oprot.writeFieldEnd()
        if self.endAttach is not None:
            oprot.writeFieldBegin('endAttach', TType.STRING, 17)
            oprot.writeString(self.endAttach.encode('utf-8') if sys.version_info[0] == 2 else self.endAttach)
            oprot.writeFieldEnd()
        if self.textSnippet is not None:
            oprot.writeFieldBegin('textSnippet', TType.STRING, 18)
            oprot.writeString(self.textSnippet.encode('utf-8') if sys.version_info[0] == 2 else self.textSnippet)
            oprot.writeFieldEnd()
        if self.recovered is not None:
            oprot.writeFieldBegin('recovered', TType.BOOL, 19)
            oprot.writeBool(self.recovered)
            oprot.writeFieldEnd()
        if self.orphan is not None:
            oprot.writeFieldBegin('orphan', TType.BOOL, 20)
            oprot.writeBool(self.orphan)
            oprot.writeFieldEnd()
        if self.embeddedImage is not None:
            oprot.writeFieldBegin('embeddedImage', TType.BOOL, 21)
            oprot.writeBool(self.embeddedImage)
            oprot.writeFieldEnd()
        if self.binaryFile is not None:
            oprot.writeFieldBegin('binaryFile', TType.STRING, 51)
            oprot.writeString(self.binaryFile.encode('utf-8') if sys.version_info[0] == 2 else self.binaryFile)
            oprot.writeFieldEnd()
        if self.textFile is not None:
            oprot.writeFieldBegin('textFile', TType.STRING, 52)
            oprot.writeString(self.textFile.encode('utf-8') if sys.version_info[0] == 2 else self.textFile)
            oprot.writeFieldEnd()
        if self.contentCreated is not None:
            oprot.writeFieldBegin('contentCreated', TType.STRUCT, 101)
            self.contentCreated.write(oprot)
            oprot.writeFieldEnd()
        if self.contentLastModified is not None:
            oprot.writeFieldBegin('contentLastModified', TType.STRUCT, 102)
            self.contentLastModified.write(oprot)
            oprot.writeFieldEnd()
        if self.contentLastAccessed is not None:
            oprot.writeFieldBegin('contentLastAccessed', TType.STRUCT, 103)
            self.contentLastAccessed.write(oprot)
            oprot.writeFieldEnd()
        if self.fileCreated is not None:
            oprot.writeFieldBegin('fileCreated', TType.STRUCT, 104)
            self.fileCreated.write(oprot)
            oprot.writeFieldEnd()
        if self.fileLastModified is not None:
            oprot.writeFieldBegin('fileLastModified', TType.STRUCT, 105)
            self.fileLastModified.write(oprot)
            oprot.writeFieldEnd()
        if self.fileLastAccessed is not None:
            oprot.writeFieldBegin('fileLastAccessed', TType.STRUCT, 106)
            self.fileLastAccessed.write(oprot)
            oprot.writeFieldEnd()
        if self.lastPrinted is not None:
            oprot.writeFieldBegin('lastPrinted', TType.STRUCT, 107)
            self.lastPrinted.write(oprot)
            oprot.writeFieldEnd()
        if self.sent is not None:
            oprot.writeFieldBegin('sent', TType.STRUCT, 108)
            self.sent.write(oprot)
            oprot.writeFieldEnd()
        if self.received is not None:
            oprot.writeFieldBegin('received', TType.STRUCT, 109)
            self.received.write(oprot)
            oprot.writeFieldEnd()
        if self.visited is not None:
            oprot.writeFieldBegin('visited', TType.STRUCT, 110)
            self.visited.write(oprot)
            oprot.writeFieldEnd()
        if self.called is not None:
            oprot.writeFieldBegin('called', TType.STRUCT, 111)
            self.called.write(oprot)
            oprot.writeFieldEnd()
        if self.started is not None:
            oprot.writeFieldBegin('started', TType.STRUCT, 112)
            self.started.write(oprot)
            oprot.writeFieldEnd()
        if self.ended is not None:
            oprot.writeFieldBegin('ended', TType.STRUCT, 113)
            self.ended.write(oprot)
            oprot.writeFieldEnd()
        if self.due is not None:
            oprot.writeFieldBegin('due', TType.STRUCT, 114)
            self.due.write(oprot)
            oprot.writeFieldEnd()
        if self.deleted is not None:
            oprot.writeFieldBegin('deleted', TType.STRUCT, 115)
            self.deleted.write(oprot)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 201)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.subject is not None:
            oprot.writeFieldBegin('subject', TType.STRING, 202)
            oprot.writeString(self.subject.encode('utf-8') if sys.version_info[0] == 2 else self.subject)
            oprot.writeFieldEnd()
        if self.pageCount is not None:
            oprot.writeFieldBegin('pageCount', TType.I32, 203)
            oprot.writeI32(self.pageCount)
            oprot.writeFieldEnd()
        if self.creators is not None:
            oprot.writeFieldBegin('creators', TType.LIST, 204)
            oprot.writeListBegin(TType.STRUCT, len(self.creators))
            for iter97 in self.creators:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contributors is not None:
            oprot.writeFieldBegin('contributors', TType.LIST, 205)
            oprot.writeListBegin(TType.STRUCT, len(self.contributors))
            for iter98 in self.contributors:
                iter98.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.organization is not None:
            oprot.writeFieldBegin('organization', TType.STRING, 206)
            oprot.writeString(self.organization.encode('utf-8') if sys.version_info[0] == 2 else self.organization)
            oprot.writeFieldEnd()
        if self.emptyDocument is not None:
            oprot.writeFieldBegin('emptyDocument', TType.BOOL, 207)
            oprot.writeBool(self.emptyDocument)
            oprot.writeFieldEnd()
        if self.messageID is not None:
            oprot.writeFieldBegin('messageID', TType.STRING, 251)
            oprot.writeString(self.messageID.encode('utf-8') if sys.version_info[0] == 2 else self.messageID)
            oprot.writeFieldEnd()
        if self.messageHeaders is not None:
            oprot.writeFieldBegin('messageHeaders', TType.STRING, 252)
            oprot.writeString(self.messageHeaders.encode('utf-8') if sys.version_info[0] == 2 else self.messageHeaders)
            oprot.writeFieldEnd()
        if self.conversationIndexSet is not None:
            oprot.writeFieldBegin('conversationIndexSet', TType.SET, 253)
            oprot.writeSetBegin(TType.STRING, len(self.conversationIndexSet))
            for iter99 in self.conversationIndexSet:
                oprot.writeString(iter99.encode('utf-8') if sys.version_info[0] == 2 else iter99)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.messageFrom is not None:
            oprot.writeFieldBegin('messageFrom', TType.SET, 254)
            oprot.writeSetBegin(TType.STRUCT, len(self.messageFrom))
            for iter100 in self.messageFrom:
                iter100.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.messageSenders is not None:
            oprot.writeFieldBegin('messageSenders', TType.SET, 255)
            oprot.writeSetBegin(TType.STRUCT, len(self.messageSenders))
            for iter101 in self.messageSenders:
                iter101.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.messageTo is not None:
            oprot.writeFieldBegin('messageTo', TType.SET, 256)
            oprot.writeSetBegin(TType.STRUCT, len(self.messageTo))
            for iter102 in self.messageTo:
                iter102.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.messageCc is not None:
            oprot.writeFieldBegin('messageCc', TType.SET, 257)
            oprot.writeSetBegin(TType.STRUCT, len(self.messageCc))
            for iter103 in self.messageCc:
                iter103.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.messageBcc is not None:
            oprot.writeFieldBegin('messageBcc', TType.SET, 258)
            oprot.writeSetBegin(TType.STRUCT, len(self.messageBcc))
            for iter104 in self.messageBcc:
                iter104.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.chatSenders is not None:
            oprot.writeFieldBegin('chatSenders', TType.SET, 259)
            oprot.writeSetBegin(TType.STRUCT, len(self.chatSenders))
            for iter105 in self.chatSenders:
                iter105.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.chatReceivers is not None:
            oprot.writeFieldBegin('chatReceivers', TType.SET, 260)
            oprot.writeSetBegin(TType.STRUCT, len(self.chatReceivers))
            for iter106 in self.chatReceivers:
                iter106.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.chatAccounts is not None:
            oprot.writeFieldBegin('chatAccounts', TType.SET, 261)
            oprot.writeSetBegin(TType.STRUCT, len(self.chatAccounts))
            for iter107 in self.chatAccounts:
                iter107.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.isRead is not None:
            oprot.writeFieldBegin('isRead', TType.BOOL, 262)
            oprot.writeBool(self.isRead)
            oprot.writeFieldEnd()
        if self.durationSeconds is not None:
            oprot.writeFieldBegin('durationSeconds', TType.I32, 263)
            oprot.writeI32(self.durationSeconds)
            oprot.writeFieldEnd()
        if self.incomingPhoneNumbers is not None:
            oprot.writeFieldBegin('incomingPhoneNumbers', TType.SET, 264)
            oprot.writeSetBegin(TType.STRUCT, len(self.incomingPhoneNumbers))
            for iter108 in self.incomingPhoneNumbers:
                iter108.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.outgoingPhoneNumbers is not None:
            oprot.writeFieldBegin('outgoingPhoneNumbers', TType.SET, 265)
            oprot.writeSetBegin(TType.STRUCT, len(self.outgoingPhoneNumbers))
            for iter109 in self.outgoingPhoneNumbers:
                iter109.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.allPhoneNumbers is not None:
            oprot.writeFieldBegin('allPhoneNumbers', TType.SET, 266)
            oprot.writeSetBegin(TType.STRUCT, len(self.allPhoneNumbers))
            for iter110 in self.allPhoneNumbers:
                iter110.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.sourceIP is not None:
            oprot.writeFieldBegin('sourceIP', TType.STRING, 267)
            oprot.writeString(self.sourceIP.encode('utf-8') if sys.version_info[0] == 2 else self.sourceIP)
            oprot.writeFieldEnd()
        if self.messageCount is not None:
            oprot.writeFieldBegin('messageCount', TType.I32, 268)
            oprot.writeI32(self.messageCount)
            oprot.writeFieldEnd()
        if self.chatProtocol is not None:
            oprot.writeFieldBegin('chatProtocol', TType.SET, 269)
            oprot.writeSetBegin(TType.STRING, len(self.chatProtocol))
            for iter111 in self.chatProtocol:
                oprot.writeString(iter111.encode('utf-8') if sys.version_info[0] == 2 else iter111)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.chatConversationId is not None:
            oprot.writeFieldBegin('chatConversationId', TType.STRING, 270)
            oprot.writeString(self.chatConversationId.encode('utf-8') if sys.version_info[0] == 2 else self.chatConversationId)
            oprot.writeFieldEnd()
        if self.intellaChatConversationId is not None:
            oprot.writeFieldBegin('intellaChatConversationId', TType.STRING, 271)
            oprot.writeString(self.intellaChatConversationId.encode('utf-8') if sys.version_info[0] == 2 else self.intellaChatConversationId)
            oprot.writeFieldEnd()
        if self.chatConversationTitle is not None:
            oprot.writeFieldBegin('chatConversationTitle', TType.STRING, 272)
            oprot.writeString(self.chatConversationTitle.encode('utf-8') if sys.version_info[0] == 2 else self.chatConversationTitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FoundItemResult(object):
    """
    Attributes:
     - action

    """


    def __init__(self, action=None,):
        self.action = action

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.action = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FoundItemResult')
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.I32, 1)
            oprot.writeI32(self.action)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProcessedItemResult(object):
    """
    Attributes:
     - action
     - modifiedItem
     - tags
     - customColumns

    """


    def __init__(self, action=None, modifiedItem=None, tags=None, customColumns=None,):
        self.action = action
        self.modifiedItem = modifiedItem
        self.tags = tags
        self.customColumns = customColumns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.action = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.modifiedItem = ProcessedItem()
                    self.modifiedItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.tags = set()
                    (_etype115, _size112) = iprot.readSetBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tags.add(_elem117)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.customColumns = []
                    (_etype121, _size118) = iprot.readListBegin()
                    for _i122 in range(_size118):
                        _elem123 = CustomColumn()
                        _elem123.read(iprot)
                        self.customColumns.append(_elem123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProcessedItemResult')
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.I32, 1)
            oprot.writeI32(self.action)
            oprot.writeFieldEnd()
        if self.modifiedItem is not None:
            oprot.writeFieldBegin('modifiedItem', TType.STRUCT, 2)
            self.modifiedItem.write(oprot)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.tags))
            for iter124 in self.tags:
                oprot.writeString(iter124.encode('utf-8') if sys.version_info[0] == 2 else iter124)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.customColumns is not None:
            oprot.writeFieldBegin('customColumns', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.customColumns))
            for iter125 in self.customColumns:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CustomColumn(object):
    """
    Attributes:
     - name
     - type
     - value

    """


    def __init__(self, name=None, type=None, value=None,):
        self.name = name
        self.type = type
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.value = CustomColumnValue()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CustomColumn')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 3)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CustomColumnValue(object):
    """
    Attributes:
     - value
     - intValue
     - longValue
     - doubleValue
     - boolValue
     - dateTimeValue

    """


    def __init__(self, value=None, intValue=None, longValue=None, doubleValue=None, boolValue=None, dateTimeValue=None,):
        self.value = value
        self.intValue = intValue
        self.longValue = longValue
        self.doubleValue = doubleValue
        self.boolValue = boolValue
        self.dateTimeValue = dateTimeValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.intValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.longValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.dateTimeValue = ScriptTZonedDateTime()
                    self.dateTimeValue.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CustomColumnValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I32, 2)
            oprot.writeI32(self.intValue)
            oprot.writeFieldEnd()
        if self.longValue is not None:
            oprot.writeFieldBegin('longValue', TType.I64, 3)
            oprot.writeI64(self.longValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 5)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        if self.dateTimeValue is not None:
            oprot.writeFieldBegin('dateTimeValue', TType.STRUCT, 6)
            self.dateTimeValue.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ScriptTZonedDateTime)
ScriptTZonedDateTime.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'epochMili', None, None, ),  # 1
    (2, TType.STRING, 'zoneId', 'UTF8', None, ),  # 2
)
all_structs.append(RawDataEntry)
RawDataEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(PersonAccount)
PersonAccount.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'contact', 'UTF8', None, ),  # 2
)
all_structs.append(GeoLocation)
GeoLocation.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'latitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'longitude', None, None, ),  # 2
)
all_structs.append(FoundItem)
FoundItem.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'fileName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'uri', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'md5', 'UTF8', None, ),  # 4
    (5, TType.I64, 'size', None, None, ),  # 5
    (6, TType.STRING, 'mediaType', 'UTF8', None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    (51, TType.STRING, 'binaryFile', 'UTF8', None, ),  # 51
)
all_structs.append(ProcessedItem)
ProcessedItem.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'fileName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'uri', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'md5', 'UTF8', None, ),  # 4
    (5, TType.I64, 'size', None, None, ),  # 5
    (6, TType.STRING, 'mediaType', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'encrypted', None, None, ),  # 7
    (8, TType.BOOL, 'decrypted', None, None, ),  # 8
    (9, TType.STRING, 'password', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'certificate', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'rawData', (TType.STRUCT, [RawDataEntry, None], False), None, ),  # 11
    (12, TType.STRING, 'contactName', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'nativeID', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'documentID', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'parentDocumentID', 'UTF8', None, ),  # 15
    (16, TType.STRUCT, 'geoLocation', [GeoLocation, None], None, ),  # 16
    (17, TType.STRING, 'endAttach', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'textSnippet', 'UTF8', None, ),  # 18
    (19, TType.BOOL, 'recovered', None, None, ),  # 19
    (20, TType.BOOL, 'orphan', None, None, ),  # 20
    (21, TType.BOOL, 'embeddedImage', None, None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    (51, TType.STRING, 'binaryFile', 'UTF8', None, ),  # 51
    (52, TType.STRING, 'textFile', 'UTF8', None, ),  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    (101, TType.STRUCT, 'contentCreated', [ScriptTZonedDateTime, None], None, ),  # 101
    (102, TType.STRUCT, 'contentLastModified', [ScriptTZonedDateTime, None], None, ),  # 102
    (103, TType.STRUCT, 'contentLastAccessed', [ScriptTZonedDateTime, None], None, ),  # 103
    (104, TType.STRUCT, 'fileCreated', [ScriptTZonedDateTime, None], None, ),  # 104
    (105, TType.STRUCT, 'fileLastModified', [ScriptTZonedDateTime, None], None, ),  # 105
    (106, TType.STRUCT, 'fileLastAccessed', [ScriptTZonedDateTime, None], None, ),  # 106
    (107, TType.STRUCT, 'lastPrinted', [ScriptTZonedDateTime, None], None, ),  # 107
    (108, TType.STRUCT, 'sent', [ScriptTZonedDateTime, None], None, ),  # 108
    (109, TType.STRUCT, 'received', [ScriptTZonedDateTime, None], None, ),  # 109
    (110, TType.STRUCT, 'visited', [ScriptTZonedDateTime, None], None, ),  # 110
    (111, TType.STRUCT, 'called', [ScriptTZonedDateTime, None], None, ),  # 111
    (112, TType.STRUCT, 'started', [ScriptTZonedDateTime, None], None, ),  # 112
    (113, TType.STRUCT, 'ended', [ScriptTZonedDateTime, None], None, ),  # 113
    (114, TType.STRUCT, 'due', [ScriptTZonedDateTime, None], None, ),  # 114
    (115, TType.STRUCT, 'deleted', [ScriptTZonedDateTime, None], None, ),  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    (201, TType.STRING, 'title', 'UTF8', None, ),  # 201
    (202, TType.STRING, 'subject', 'UTF8', None, ),  # 202
    (203, TType.I32, 'pageCount', None, None, ),  # 203
    (204, TType.LIST, 'creators', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 204
    (205, TType.LIST, 'contributors', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 205
    (206, TType.STRING, 'organization', 'UTF8', None, ),  # 206
    (207, TType.BOOL, 'emptyDocument', None, None, ),  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    (251, TType.STRING, 'messageID', 'UTF8', None, ),  # 251
    (252, TType.STRING, 'messageHeaders', 'UTF8', None, ),  # 252
    (253, TType.SET, 'conversationIndexSet', (TType.STRING, 'UTF8', False), None, ),  # 253
    (254, TType.SET, 'messageFrom', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 254
    (255, TType.SET, 'messageSenders', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 255
    (256, TType.SET, 'messageTo', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 256
    (257, TType.SET, 'messageCc', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 257
    (258, TType.SET, 'messageBcc', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 258
    (259, TType.SET, 'chatSenders', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 259
    (260, TType.SET, 'chatReceivers', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 260
    (261, TType.SET, 'chatAccounts', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 261
    (262, TType.BOOL, 'isRead', None, None, ),  # 262
    (263, TType.I32, 'durationSeconds', None, None, ),  # 263
    (264, TType.SET, 'incomingPhoneNumbers', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 264
    (265, TType.SET, 'outgoingPhoneNumbers', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 265
    (266, TType.SET, 'allPhoneNumbers', (TType.STRUCT, [PersonAccount, None], False), None, ),  # 266
    (267, TType.STRING, 'sourceIP', 'UTF8', None, ),  # 267
    (268, TType.I32, 'messageCount', None, None, ),  # 268
    (269, TType.SET, 'chatProtocol', (TType.STRING, 'UTF8', False), None, ),  # 269
    (270, TType.STRING, 'chatConversationId', 'UTF8', None, ),  # 270
    (271, TType.STRING, 'intellaChatConversationId', 'UTF8', None, ),  # 271
    (272, TType.STRING, 'chatConversationTitle', 'UTF8', None, ),  # 272
)
all_structs.append(FoundItemResult)
FoundItemResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'action', None, None, ),  # 1
)
all_structs.append(ProcessedItemResult)
ProcessedItemResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'action', None, None, ),  # 1
    (2, TType.STRUCT, 'modifiedItem', [ProcessedItem, None], None, ),  # 2
    (3, TType.SET, 'tags', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'customColumns', (TType.STRUCT, [CustomColumn, None], False), None, ),  # 4
)
all_structs.append(CustomColumn)
CustomColumn.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'value', [CustomColumnValue, None], None, ),  # 3
)
all_structs.append(CustomColumnValue)
CustomColumnValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
    (2, TType.I32, 'intValue', None, None, ),  # 2
    (3, TType.I64, 'longValue', None, None, ),  # 3
    (4, TType.DOUBLE, 'doubleValue', None, None, ),  # 4
    (5, TType.BOOL, 'boolValue', None, None, ),  # 5
    (6, TType.STRUCT, 'dateTimeValue', [ScriptTZonedDateTime, None], None, ),  # 6
)
fix_spec(all_structs)
del all_structs
