/**
 * MIT License
 *
 * Copyright Vound, LLC (http://www.vound-software.com/).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vound.intella.scripting.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-11-02")
public class ProcessedItem implements org.apache.thrift.TBase<ProcessedItem, ProcessedItem._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessedItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessedItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENCRYPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("encrypted", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DECRYPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("decrypted", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RAW_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("rawData", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField CONTACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contactName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nativeID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentID", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PARENT_DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentDocumentID", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GEO_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("geoLocation", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField END_ATTACH_FIELD_DESC = new org.apache.thrift.protocol.TField("endAttach", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TEXT_SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("textSnippet", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField RECOVERED_FIELD_DESC = new org.apache.thrift.protocol.TField("recovered", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField ORPHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("orphan", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField EMBEDDED_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("embeddedImage", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField FS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("fsPath", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IS_TOP_LEVEL_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isTopLevelParent", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField BINARY_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryFile", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField TEXT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("textFile", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField CONTENT_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("contentCreated", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField CONTENT_LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("contentLastModified", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField CONTENT_LAST_ACCESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("contentLastAccessed", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField FILE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("fileCreated", org.apache.thrift.protocol.TType.STRUCT, (short)104);
  private static final org.apache.thrift.protocol.TField FILE_LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("fileLastModified", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField FILE_LAST_ACCESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("fileLastAccessed", org.apache.thrift.protocol.TType.STRUCT, (short)106);
  private static final org.apache.thrift.protocol.TField LAST_PRINTED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrinted", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("sent", org.apache.thrift.protocol.TType.STRUCT, (short)108);
  private static final org.apache.thrift.protocol.TField RECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("received", org.apache.thrift.protocol.TType.STRUCT, (short)109);
  private static final org.apache.thrift.protocol.TField VISITED_FIELD_DESC = new org.apache.thrift.protocol.TField("visited", org.apache.thrift.protocol.TType.STRUCT, (short)110);
  private static final org.apache.thrift.protocol.TField CALLED_FIELD_DESC = new org.apache.thrift.protocol.TField("called", org.apache.thrift.protocol.TType.STRUCT, (short)111);
  private static final org.apache.thrift.protocol.TField STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("started", org.apache.thrift.protocol.TType.STRUCT, (short)112);
  private static final org.apache.thrift.protocol.TField ENDED_FIELD_DESC = new org.apache.thrift.protocol.TField("ended", org.apache.thrift.protocol.TType.STRUCT, (short)113);
  private static final org.apache.thrift.protocol.TField DUE_FIELD_DESC = new org.apache.thrift.protocol.TField("due", org.apache.thrift.protocol.TType.STRUCT, (short)114);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.STRUCT, (short)115);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)201);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)202);
  private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)203);
  private static final org.apache.thrift.protocol.TField CREATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("creators", org.apache.thrift.protocol.TType.LIST, (short)204);
  private static final org.apache.thrift.protocol.TField CONTRIBUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("contributors", org.apache.thrift.protocol.TType.LIST, (short)205);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("organization", org.apache.thrift.protocol.TType.STRING, (short)206);
  private static final org.apache.thrift.protocol.TField EMPTY_DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyDocument", org.apache.thrift.protocol.TType.BOOL, (short)207);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageID", org.apache.thrift.protocol.TType.STRING, (short)251);
  private static final org.apache.thrift.protocol.TField MESSAGE_HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageHeaders", org.apache.thrift.protocol.TType.STRING, (short)252);
  private static final org.apache.thrift.protocol.TField CONVERSATION_INDEX_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("conversationIndexSet", org.apache.thrift.protocol.TType.SET, (short)253);
  private static final org.apache.thrift.protocol.TField MESSAGE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("messageFrom", org.apache.thrift.protocol.TType.SET, (short)254);
  private static final org.apache.thrift.protocol.TField MESSAGE_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageSenders", org.apache.thrift.protocol.TType.SET, (short)255);
  private static final org.apache.thrift.protocol.TField MESSAGE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("messageTo", org.apache.thrift.protocol.TType.SET, (short)256);
  private static final org.apache.thrift.protocol.TField MESSAGE_CC_FIELD_DESC = new org.apache.thrift.protocol.TField("messageCc", org.apache.thrift.protocol.TType.SET, (short)257);
  private static final org.apache.thrift.protocol.TField MESSAGE_BCC_FIELD_DESC = new org.apache.thrift.protocol.TField("messageBcc", org.apache.thrift.protocol.TType.SET, (short)258);
  private static final org.apache.thrift.protocol.TField CHAT_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("chatSenders", org.apache.thrift.protocol.TType.SET, (short)259);
  private static final org.apache.thrift.protocol.TField CHAT_RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("chatReceivers", org.apache.thrift.protocol.TType.SET, (short)260);
  private static final org.apache.thrift.protocol.TField CHAT_ACCOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("chatAccounts", org.apache.thrift.protocol.TType.SET, (short)261);
  private static final org.apache.thrift.protocol.TField IS_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("isRead", org.apache.thrift.protocol.TType.BOOL, (short)262);
  private static final org.apache.thrift.protocol.TField DURATION_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("durationSeconds", org.apache.thrift.protocol.TType.I32, (short)263);
  private static final org.apache.thrift.protocol.TField INCOMING_PHONE_NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingPhoneNumbers", org.apache.thrift.protocol.TType.SET, (short)264);
  private static final org.apache.thrift.protocol.TField OUTGOING_PHONE_NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("outgoingPhoneNumbers", org.apache.thrift.protocol.TType.SET, (short)265);
  private static final org.apache.thrift.protocol.TField ALL_PHONE_NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("allPhoneNumbers", org.apache.thrift.protocol.TType.SET, (short)266);
  private static final org.apache.thrift.protocol.TField SOURCE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceIP", org.apache.thrift.protocol.TType.STRING, (short)267);
  private static final org.apache.thrift.protocol.TField MESSAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("messageCount", org.apache.thrift.protocol.TType.I32, (short)268);
  private static final org.apache.thrift.protocol.TField CHAT_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("chatProtocol", org.apache.thrift.protocol.TType.SET, (short)269);
  private static final org.apache.thrift.protocol.TField CHAT_CONVERSATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatConversationId", org.apache.thrift.protocol.TType.STRING, (short)270);
  private static final org.apache.thrift.protocol.TField INTELLA_CHAT_CONVERSATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intellaChatConversationId", org.apache.thrift.protocol.TType.STRING, (short)271);
  private static final org.apache.thrift.protocol.TField CHAT_CONVERSATION_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("chatConversationTitle", org.apache.thrift.protocol.TType.STRING, (short)272);
  private static final org.apache.thrift.protocol.TField VISITED_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("visitedUrl", org.apache.thrift.protocol.TType.STRING, (short)301);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProcessedItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProcessedItemTupleSchemeFactory();

  public long id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fileName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String uri; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String md5; // optional
  public long size; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String mediaType; // optional
  public boolean encrypted; // optional
  public boolean decrypted; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String certificate; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<RawDataEntry> rawData; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String contactName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String nativeID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String documentID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String parentDocumentID; // optional
  public @org.apache.thrift.annotation.Nullable GeoLocation geoLocation; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String endAttach; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String textSnippet; // optional
  public boolean recovered; // optional
  public boolean orphan; // optional
  public boolean embeddedImage; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fsPath; // optional
  public boolean isTopLevelParent; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String binaryFile; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String textFile; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime contentCreated; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime contentLastModified; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime contentLastAccessed; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime fileCreated; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime fileLastModified; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime fileLastAccessed; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime lastPrinted; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime sent; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime received; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime visited; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime called; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime started; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime ended; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime due; // optional
  public @org.apache.thrift.annotation.Nullable ScriptTZonedDateTime deleted; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String title; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String subject; // optional
  public int pageCount; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<PersonAccount> creators; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<PersonAccount> contributors; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String organization; // optional
  public boolean emptyDocument; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String messageID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String messageHeaders; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> conversationIndexSet; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageFrom; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageSenders; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageTo; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageCc; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageBcc; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> chatSenders; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> chatReceivers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> chatAccounts; // optional
  public boolean isRead; // optional
  public int durationSeconds; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> incomingPhoneNumbers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> outgoingPhoneNumbers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> allPhoneNumbers; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sourceIP; // optional
  public int messageCount; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> chatProtocol; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String chatConversationId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String intellaChatConversationId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String chatConversationTitle; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String visitedUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FILE_NAME((short)2, "fileName"),
    URI((short)3, "uri"),
    MD5((short)4, "md5"),
    SIZE((short)5, "size"),
    MEDIA_TYPE((short)6, "mediaType"),
    ENCRYPTED((short)7, "encrypted"),
    DECRYPTED((short)8, "decrypted"),
    PASSWORD((short)9, "password"),
    CERTIFICATE((short)10, "certificate"),
    RAW_DATA((short)11, "rawData"),
    CONTACT_NAME((short)12, "contactName"),
    NATIVE_ID((short)13, "nativeID"),
    DOCUMENT_ID((short)14, "documentID"),
    PARENT_DOCUMENT_ID((short)15, "parentDocumentID"),
    GEO_LOCATION((short)16, "geoLocation"),
    END_ATTACH((short)17, "endAttach"),
    TEXT_SNIPPET((short)18, "textSnippet"),
    RECOVERED((short)19, "recovered"),
    ORPHAN((short)20, "orphan"),
    EMBEDDED_IMAGE((short)21, "embeddedImage"),
    FS_PATH((short)22, "fsPath"),
    IS_TOP_LEVEL_PARENT((short)23, "isTopLevelParent"),
    BINARY_FILE((short)51, "binaryFile"),
    TEXT_FILE((short)52, "textFile"),
    CONTENT_CREATED((short)101, "contentCreated"),
    CONTENT_LAST_MODIFIED((short)102, "contentLastModified"),
    CONTENT_LAST_ACCESSED((short)103, "contentLastAccessed"),
    FILE_CREATED((short)104, "fileCreated"),
    FILE_LAST_MODIFIED((short)105, "fileLastModified"),
    FILE_LAST_ACCESSED((short)106, "fileLastAccessed"),
    LAST_PRINTED((short)107, "lastPrinted"),
    SENT((short)108, "sent"),
    RECEIVED((short)109, "received"),
    VISITED((short)110, "visited"),
    CALLED((short)111, "called"),
    STARTED((short)112, "started"),
    ENDED((short)113, "ended"),
    DUE((short)114, "due"),
    DELETED((short)115, "deleted"),
    TITLE((short)201, "title"),
    SUBJECT((short)202, "subject"),
    PAGE_COUNT((short)203, "pageCount"),
    CREATORS((short)204, "creators"),
    CONTRIBUTORS((short)205, "contributors"),
    ORGANIZATION((short)206, "organization"),
    EMPTY_DOCUMENT((short)207, "emptyDocument"),
    MESSAGE_ID((short)251, "messageID"),
    MESSAGE_HEADERS((short)252, "messageHeaders"),
    CONVERSATION_INDEX_SET((short)253, "conversationIndexSet"),
    MESSAGE_FROM((short)254, "messageFrom"),
    MESSAGE_SENDERS((short)255, "messageSenders"),
    MESSAGE_TO((short)256, "messageTo"),
    MESSAGE_CC((short)257, "messageCc"),
    MESSAGE_BCC((short)258, "messageBcc"),
    CHAT_SENDERS((short)259, "chatSenders"),
    CHAT_RECEIVERS((short)260, "chatReceivers"),
    CHAT_ACCOUNTS((short)261, "chatAccounts"),
    IS_READ((short)262, "isRead"),
    DURATION_SECONDS((short)263, "durationSeconds"),
    INCOMING_PHONE_NUMBERS((short)264, "incomingPhoneNumbers"),
    OUTGOING_PHONE_NUMBERS((short)265, "outgoingPhoneNumbers"),
    ALL_PHONE_NUMBERS((short)266, "allPhoneNumbers"),
    SOURCE_IP((short)267, "sourceIP"),
    MESSAGE_COUNT((short)268, "messageCount"),
    CHAT_PROTOCOL((short)269, "chatProtocol"),
    CHAT_CONVERSATION_ID((short)270, "chatConversationId"),
    INTELLA_CHAT_CONVERSATION_ID((short)271, "intellaChatConversationId"),
    CHAT_CONVERSATION_TITLE((short)272, "chatConversationTitle"),
    VISITED_URL((short)301, "visitedUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FILE_NAME
          return FILE_NAME;
        case 3: // URI
          return URI;
        case 4: // MD5
          return MD5;
        case 5: // SIZE
          return SIZE;
        case 6: // MEDIA_TYPE
          return MEDIA_TYPE;
        case 7: // ENCRYPTED
          return ENCRYPTED;
        case 8: // DECRYPTED
          return DECRYPTED;
        case 9: // PASSWORD
          return PASSWORD;
        case 10: // CERTIFICATE
          return CERTIFICATE;
        case 11: // RAW_DATA
          return RAW_DATA;
        case 12: // CONTACT_NAME
          return CONTACT_NAME;
        case 13: // NATIVE_ID
          return NATIVE_ID;
        case 14: // DOCUMENT_ID
          return DOCUMENT_ID;
        case 15: // PARENT_DOCUMENT_ID
          return PARENT_DOCUMENT_ID;
        case 16: // GEO_LOCATION
          return GEO_LOCATION;
        case 17: // END_ATTACH
          return END_ATTACH;
        case 18: // TEXT_SNIPPET
          return TEXT_SNIPPET;
        case 19: // RECOVERED
          return RECOVERED;
        case 20: // ORPHAN
          return ORPHAN;
        case 21: // EMBEDDED_IMAGE
          return EMBEDDED_IMAGE;
        case 22: // FS_PATH
          return FS_PATH;
        case 23: // IS_TOP_LEVEL_PARENT
          return IS_TOP_LEVEL_PARENT;
        case 51: // BINARY_FILE
          return BINARY_FILE;
        case 52: // TEXT_FILE
          return TEXT_FILE;
        case 101: // CONTENT_CREATED
          return CONTENT_CREATED;
        case 102: // CONTENT_LAST_MODIFIED
          return CONTENT_LAST_MODIFIED;
        case 103: // CONTENT_LAST_ACCESSED
          return CONTENT_LAST_ACCESSED;
        case 104: // FILE_CREATED
          return FILE_CREATED;
        case 105: // FILE_LAST_MODIFIED
          return FILE_LAST_MODIFIED;
        case 106: // FILE_LAST_ACCESSED
          return FILE_LAST_ACCESSED;
        case 107: // LAST_PRINTED
          return LAST_PRINTED;
        case 108: // SENT
          return SENT;
        case 109: // RECEIVED
          return RECEIVED;
        case 110: // VISITED
          return VISITED;
        case 111: // CALLED
          return CALLED;
        case 112: // STARTED
          return STARTED;
        case 113: // ENDED
          return ENDED;
        case 114: // DUE
          return DUE;
        case 115: // DELETED
          return DELETED;
        case 201: // TITLE
          return TITLE;
        case 202: // SUBJECT
          return SUBJECT;
        case 203: // PAGE_COUNT
          return PAGE_COUNT;
        case 204: // CREATORS
          return CREATORS;
        case 205: // CONTRIBUTORS
          return CONTRIBUTORS;
        case 206: // ORGANIZATION
          return ORGANIZATION;
        case 207: // EMPTY_DOCUMENT
          return EMPTY_DOCUMENT;
        case 251: // MESSAGE_ID
          return MESSAGE_ID;
        case 252: // MESSAGE_HEADERS
          return MESSAGE_HEADERS;
        case 253: // CONVERSATION_INDEX_SET
          return CONVERSATION_INDEX_SET;
        case 254: // MESSAGE_FROM
          return MESSAGE_FROM;
        case 255: // MESSAGE_SENDERS
          return MESSAGE_SENDERS;
        case 256: // MESSAGE_TO
          return MESSAGE_TO;
        case 257: // MESSAGE_CC
          return MESSAGE_CC;
        case 258: // MESSAGE_BCC
          return MESSAGE_BCC;
        case 259: // CHAT_SENDERS
          return CHAT_SENDERS;
        case 260: // CHAT_RECEIVERS
          return CHAT_RECEIVERS;
        case 261: // CHAT_ACCOUNTS
          return CHAT_ACCOUNTS;
        case 262: // IS_READ
          return IS_READ;
        case 263: // DURATION_SECONDS
          return DURATION_SECONDS;
        case 264: // INCOMING_PHONE_NUMBERS
          return INCOMING_PHONE_NUMBERS;
        case 265: // OUTGOING_PHONE_NUMBERS
          return OUTGOING_PHONE_NUMBERS;
        case 266: // ALL_PHONE_NUMBERS
          return ALL_PHONE_NUMBERS;
        case 267: // SOURCE_IP
          return SOURCE_IP;
        case 268: // MESSAGE_COUNT
          return MESSAGE_COUNT;
        case 269: // CHAT_PROTOCOL
          return CHAT_PROTOCOL;
        case 270: // CHAT_CONVERSATION_ID
          return CHAT_CONVERSATION_ID;
        case 271: // INTELLA_CHAT_CONVERSATION_ID
          return INTELLA_CHAT_CONVERSATION_ID;
        case 272: // CHAT_CONVERSATION_TITLE
          return CHAT_CONVERSATION_TITLE;
        case 301: // VISITED_URL
          return VISITED_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private static final int __ENCRYPTED_ISSET_ID = 2;
  private static final int __DECRYPTED_ISSET_ID = 3;
  private static final int __RECOVERED_ISSET_ID = 4;
  private static final int __ORPHAN_ISSET_ID = 5;
  private static final int __EMBEDDEDIMAGE_ISSET_ID = 6;
  private static final int __ISTOPLEVELPARENT_ISSET_ID = 7;
  private static final int __PAGECOUNT_ISSET_ID = 8;
  private static final int __EMPTYDOCUMENT_ISSET_ID = 9;
  private static final int __ISREAD_ISSET_ID = 10;
  private static final int __DURATIONSECONDS_ISSET_ID = 11;
  private static final int __MESSAGECOUNT_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.FILE_NAME,_Fields.URI,_Fields.MD5,_Fields.SIZE,_Fields.MEDIA_TYPE,_Fields.ENCRYPTED,_Fields.DECRYPTED,_Fields.PASSWORD,_Fields.CERTIFICATE,_Fields.RAW_DATA,_Fields.CONTACT_NAME,_Fields.NATIVE_ID,_Fields.DOCUMENT_ID,_Fields.PARENT_DOCUMENT_ID,_Fields.GEO_LOCATION,_Fields.END_ATTACH,_Fields.TEXT_SNIPPET,_Fields.RECOVERED,_Fields.ORPHAN,_Fields.EMBEDDED_IMAGE,_Fields.FS_PATH,_Fields.IS_TOP_LEVEL_PARENT,_Fields.BINARY_FILE,_Fields.TEXT_FILE,_Fields.CONTENT_CREATED,_Fields.CONTENT_LAST_MODIFIED,_Fields.CONTENT_LAST_ACCESSED,_Fields.FILE_CREATED,_Fields.FILE_LAST_MODIFIED,_Fields.FILE_LAST_ACCESSED,_Fields.LAST_PRINTED,_Fields.SENT,_Fields.RECEIVED,_Fields.VISITED,_Fields.CALLED,_Fields.STARTED,_Fields.ENDED,_Fields.DUE,_Fields.DELETED,_Fields.TITLE,_Fields.SUBJECT,_Fields.PAGE_COUNT,_Fields.CREATORS,_Fields.CONTRIBUTORS,_Fields.ORGANIZATION,_Fields.EMPTY_DOCUMENT,_Fields.MESSAGE_ID,_Fields.MESSAGE_HEADERS,_Fields.CONVERSATION_INDEX_SET,_Fields.MESSAGE_FROM,_Fields.MESSAGE_SENDERS,_Fields.MESSAGE_TO,_Fields.MESSAGE_CC,_Fields.MESSAGE_BCC,_Fields.CHAT_SENDERS,_Fields.CHAT_RECEIVERS,_Fields.CHAT_ACCOUNTS,_Fields.IS_READ,_Fields.DURATION_SECONDS,_Fields.INCOMING_PHONE_NUMBERS,_Fields.OUTGOING_PHONE_NUMBERS,_Fields.ALL_PHONE_NUMBERS,_Fields.SOURCE_IP,_Fields.MESSAGE_COUNT,_Fields.CHAT_PROTOCOL,_Fields.CHAT_CONVERSATION_ID,_Fields.INTELLA_CHAT_CONVERSATION_ID,_Fields.CHAT_CONVERSATION_TITLE,_Fields.VISITED_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENCRYPTED, new org.apache.thrift.meta_data.FieldMetaData("encrypted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DECRYPTED, new org.apache.thrift.meta_data.FieldMetaData("decrypted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("certificate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAW_DATA, new org.apache.thrift.meta_data.FieldMetaData("rawData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RawDataEntry.class))));
    tmpMap.put(_Fields.CONTACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contactName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("nativeID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentDocumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("geoLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeoLocation.class)));
    tmpMap.put(_Fields.END_ATTACH, new org.apache.thrift.meta_data.FieldMetaData("endAttach", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("textSnippet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOVERED, new org.apache.thrift.meta_data.FieldMetaData("recovered", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORPHAN, new org.apache.thrift.meta_data.FieldMetaData("orphan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMBEDDED_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("embeddedImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FS_PATH, new org.apache.thrift.meta_data.FieldMetaData("fsPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_TOP_LEVEL_PARENT, new org.apache.thrift.meta_data.FieldMetaData("isTopLevelParent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BINARY_FILE, new org.apache.thrift.meta_data.FieldMetaData("binaryFile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_FILE, new org.apache.thrift.meta_data.FieldMetaData("textFile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_CREATED, new org.apache.thrift.meta_data.FieldMetaData("contentCreated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.CONTENT_LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("contentLastModified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.CONTENT_LAST_ACCESSED, new org.apache.thrift.meta_data.FieldMetaData("contentLastAccessed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.FILE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("fileCreated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.FILE_LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("fileLastModified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.FILE_LAST_ACCESSED, new org.apache.thrift.meta_data.FieldMetaData("fileLastAccessed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.LAST_PRINTED, new org.apache.thrift.meta_data.FieldMetaData("lastPrinted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.SENT, new org.apache.thrift.meta_data.FieldMetaData("sent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.RECEIVED, new org.apache.thrift.meta_data.FieldMetaData("received", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.VISITED, new org.apache.thrift.meta_data.FieldMetaData("visited", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.CALLED, new org.apache.thrift.meta_data.FieldMetaData("called", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.STARTED, new org.apache.thrift.meta_data.FieldMetaData("started", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.ENDED, new org.apache.thrift.meta_data.FieldMetaData("ended", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.DUE, new org.apache.thrift.meta_data.FieldMetaData("due", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptTZonedDateTime.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATORS, new org.apache.thrift.meta_data.FieldMetaData("creators", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.CONTRIBUTORS, new org.apache.thrift.meta_data.FieldMetaData("contributors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("organization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPTY_DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("emptyDocument", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_HEADERS, new org.apache.thrift.meta_data.FieldMetaData("messageHeaders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONVERSATION_INDEX_SET, new org.apache.thrift.meta_data.FieldMetaData("conversationIndexSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MESSAGE_FROM, new org.apache.thrift.meta_data.FieldMetaData("messageFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.MESSAGE_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("messageSenders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.MESSAGE_TO, new org.apache.thrift.meta_data.FieldMetaData("messageTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.MESSAGE_CC, new org.apache.thrift.meta_data.FieldMetaData("messageCc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.MESSAGE_BCC, new org.apache.thrift.meta_data.FieldMetaData("messageBcc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.CHAT_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("chatSenders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.CHAT_RECEIVERS, new org.apache.thrift.meta_data.FieldMetaData("chatReceivers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.CHAT_ACCOUNTS, new org.apache.thrift.meta_data.FieldMetaData("chatAccounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.IS_READ, new org.apache.thrift.meta_data.FieldMetaData("isRead", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DURATION_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("durationSeconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCOMING_PHONE_NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("incomingPhoneNumbers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.OUTGOING_PHONE_NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("outgoingPhoneNumbers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.ALL_PHONE_NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("allPhoneNumbers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonAccount.class))));
    tmpMap.put(_Fields.SOURCE_IP, new org.apache.thrift.meta_data.FieldMetaData("sourceIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("messageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHAT_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("chatProtocol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHAT_CONVERSATION_ID, new org.apache.thrift.meta_data.FieldMetaData("chatConversationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTELLA_CHAT_CONVERSATION_ID, new org.apache.thrift.meta_data.FieldMetaData("intellaChatConversationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAT_CONVERSATION_TITLE, new org.apache.thrift.meta_data.FieldMetaData("chatConversationTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISITED_URL, new org.apache.thrift.meta_data.FieldMetaData("visitedUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessedItem.class, metaDataMap);
  }

  public ProcessedItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcessedItem(ProcessedItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetMd5()) {
      this.md5 = other.md5;
    }
    this.size = other.size;
    if (other.isSetMediaType()) {
      this.mediaType = other.mediaType;
    }
    this.encrypted = other.encrypted;
    this.decrypted = other.decrypted;
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetCertificate()) {
      this.certificate = other.certificate;
    }
    if (other.isSetRawData()) {
      java.util.List<RawDataEntry> __this__rawData = new java.util.ArrayList<RawDataEntry>(other.rawData.size());
      for (RawDataEntry other_element : other.rawData) {
        __this__rawData.add(new RawDataEntry(other_element));
      }
      this.rawData = __this__rawData;
    }
    if (other.isSetContactName()) {
      this.contactName = other.contactName;
    }
    if (other.isSetNativeID()) {
      this.nativeID = other.nativeID;
    }
    if (other.isSetDocumentID()) {
      this.documentID = other.documentID;
    }
    if (other.isSetParentDocumentID()) {
      this.parentDocumentID = other.parentDocumentID;
    }
    if (other.isSetGeoLocation()) {
      this.geoLocation = new GeoLocation(other.geoLocation);
    }
    if (other.isSetEndAttach()) {
      this.endAttach = other.endAttach;
    }
    if (other.isSetTextSnippet()) {
      this.textSnippet = other.textSnippet;
    }
    this.recovered = other.recovered;
    this.orphan = other.orphan;
    this.embeddedImage = other.embeddedImage;
    if (other.isSetFsPath()) {
      this.fsPath = other.fsPath;
    }
    this.isTopLevelParent = other.isTopLevelParent;
    if (other.isSetBinaryFile()) {
      this.binaryFile = other.binaryFile;
    }
    if (other.isSetTextFile()) {
      this.textFile = other.textFile;
    }
    if (other.isSetContentCreated()) {
      this.contentCreated = new ScriptTZonedDateTime(other.contentCreated);
    }
    if (other.isSetContentLastModified()) {
      this.contentLastModified = new ScriptTZonedDateTime(other.contentLastModified);
    }
    if (other.isSetContentLastAccessed()) {
      this.contentLastAccessed = new ScriptTZonedDateTime(other.contentLastAccessed);
    }
    if (other.isSetFileCreated()) {
      this.fileCreated = new ScriptTZonedDateTime(other.fileCreated);
    }
    if (other.isSetFileLastModified()) {
      this.fileLastModified = new ScriptTZonedDateTime(other.fileLastModified);
    }
    if (other.isSetFileLastAccessed()) {
      this.fileLastAccessed = new ScriptTZonedDateTime(other.fileLastAccessed);
    }
    if (other.isSetLastPrinted()) {
      this.lastPrinted = new ScriptTZonedDateTime(other.lastPrinted);
    }
    if (other.isSetSent()) {
      this.sent = new ScriptTZonedDateTime(other.sent);
    }
    if (other.isSetReceived()) {
      this.received = new ScriptTZonedDateTime(other.received);
    }
    if (other.isSetVisited()) {
      this.visited = new ScriptTZonedDateTime(other.visited);
    }
    if (other.isSetCalled()) {
      this.called = new ScriptTZonedDateTime(other.called);
    }
    if (other.isSetStarted()) {
      this.started = new ScriptTZonedDateTime(other.started);
    }
    if (other.isSetEnded()) {
      this.ended = new ScriptTZonedDateTime(other.ended);
    }
    if (other.isSetDue()) {
      this.due = new ScriptTZonedDateTime(other.due);
    }
    if (other.isSetDeleted()) {
      this.deleted = new ScriptTZonedDateTime(other.deleted);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    this.pageCount = other.pageCount;
    if (other.isSetCreators()) {
      java.util.List<PersonAccount> __this__creators = new java.util.ArrayList<PersonAccount>(other.creators.size());
      for (PersonAccount other_element : other.creators) {
        __this__creators.add(new PersonAccount(other_element));
      }
      this.creators = __this__creators;
    }
    if (other.isSetContributors()) {
      java.util.List<PersonAccount> __this__contributors = new java.util.ArrayList<PersonAccount>(other.contributors.size());
      for (PersonAccount other_element : other.contributors) {
        __this__contributors.add(new PersonAccount(other_element));
      }
      this.contributors = __this__contributors;
    }
    if (other.isSetOrganization()) {
      this.organization = other.organization;
    }
    this.emptyDocument = other.emptyDocument;
    if (other.isSetMessageID()) {
      this.messageID = other.messageID;
    }
    if (other.isSetMessageHeaders()) {
      this.messageHeaders = other.messageHeaders;
    }
    if (other.isSetConversationIndexSet()) {
      java.util.Set<java.lang.String> __this__conversationIndexSet = new java.util.HashSet<java.lang.String>(other.conversationIndexSet);
      this.conversationIndexSet = __this__conversationIndexSet;
    }
    if (other.isSetMessageFrom()) {
      java.util.Set<PersonAccount> __this__messageFrom = new java.util.HashSet<PersonAccount>(other.messageFrom.size());
      for (PersonAccount other_element : other.messageFrom) {
        __this__messageFrom.add(new PersonAccount(other_element));
      }
      this.messageFrom = __this__messageFrom;
    }
    if (other.isSetMessageSenders()) {
      java.util.Set<PersonAccount> __this__messageSenders = new java.util.HashSet<PersonAccount>(other.messageSenders.size());
      for (PersonAccount other_element : other.messageSenders) {
        __this__messageSenders.add(new PersonAccount(other_element));
      }
      this.messageSenders = __this__messageSenders;
    }
    if (other.isSetMessageTo()) {
      java.util.Set<PersonAccount> __this__messageTo = new java.util.HashSet<PersonAccount>(other.messageTo.size());
      for (PersonAccount other_element : other.messageTo) {
        __this__messageTo.add(new PersonAccount(other_element));
      }
      this.messageTo = __this__messageTo;
    }
    if (other.isSetMessageCc()) {
      java.util.Set<PersonAccount> __this__messageCc = new java.util.HashSet<PersonAccount>(other.messageCc.size());
      for (PersonAccount other_element : other.messageCc) {
        __this__messageCc.add(new PersonAccount(other_element));
      }
      this.messageCc = __this__messageCc;
    }
    if (other.isSetMessageBcc()) {
      java.util.Set<PersonAccount> __this__messageBcc = new java.util.HashSet<PersonAccount>(other.messageBcc.size());
      for (PersonAccount other_element : other.messageBcc) {
        __this__messageBcc.add(new PersonAccount(other_element));
      }
      this.messageBcc = __this__messageBcc;
    }
    if (other.isSetChatSenders()) {
      java.util.Set<PersonAccount> __this__chatSenders = new java.util.HashSet<PersonAccount>(other.chatSenders.size());
      for (PersonAccount other_element : other.chatSenders) {
        __this__chatSenders.add(new PersonAccount(other_element));
      }
      this.chatSenders = __this__chatSenders;
    }
    if (other.isSetChatReceivers()) {
      java.util.Set<PersonAccount> __this__chatReceivers = new java.util.HashSet<PersonAccount>(other.chatReceivers.size());
      for (PersonAccount other_element : other.chatReceivers) {
        __this__chatReceivers.add(new PersonAccount(other_element));
      }
      this.chatReceivers = __this__chatReceivers;
    }
    if (other.isSetChatAccounts()) {
      java.util.Set<PersonAccount> __this__chatAccounts = new java.util.HashSet<PersonAccount>(other.chatAccounts.size());
      for (PersonAccount other_element : other.chatAccounts) {
        __this__chatAccounts.add(new PersonAccount(other_element));
      }
      this.chatAccounts = __this__chatAccounts;
    }
    this.isRead = other.isRead;
    this.durationSeconds = other.durationSeconds;
    if (other.isSetIncomingPhoneNumbers()) {
      java.util.Set<PersonAccount> __this__incomingPhoneNumbers = new java.util.HashSet<PersonAccount>(other.incomingPhoneNumbers.size());
      for (PersonAccount other_element : other.incomingPhoneNumbers) {
        __this__incomingPhoneNumbers.add(new PersonAccount(other_element));
      }
      this.incomingPhoneNumbers = __this__incomingPhoneNumbers;
    }
    if (other.isSetOutgoingPhoneNumbers()) {
      java.util.Set<PersonAccount> __this__outgoingPhoneNumbers = new java.util.HashSet<PersonAccount>(other.outgoingPhoneNumbers.size());
      for (PersonAccount other_element : other.outgoingPhoneNumbers) {
        __this__outgoingPhoneNumbers.add(new PersonAccount(other_element));
      }
      this.outgoingPhoneNumbers = __this__outgoingPhoneNumbers;
    }
    if (other.isSetAllPhoneNumbers()) {
      java.util.Set<PersonAccount> __this__allPhoneNumbers = new java.util.HashSet<PersonAccount>(other.allPhoneNumbers.size());
      for (PersonAccount other_element : other.allPhoneNumbers) {
        __this__allPhoneNumbers.add(new PersonAccount(other_element));
      }
      this.allPhoneNumbers = __this__allPhoneNumbers;
    }
    if (other.isSetSourceIP()) {
      this.sourceIP = other.sourceIP;
    }
    this.messageCount = other.messageCount;
    if (other.isSetChatProtocol()) {
      java.util.Set<java.lang.String> __this__chatProtocol = new java.util.HashSet<java.lang.String>(other.chatProtocol);
      this.chatProtocol = __this__chatProtocol;
    }
    if (other.isSetChatConversationId()) {
      this.chatConversationId = other.chatConversationId;
    }
    if (other.isSetIntellaChatConversationId()) {
      this.intellaChatConversationId = other.intellaChatConversationId;
    }
    if (other.isSetChatConversationTitle()) {
      this.chatConversationTitle = other.chatConversationTitle;
    }
    if (other.isSetVisitedUrl()) {
      this.visitedUrl = other.visitedUrl;
    }
  }

  public ProcessedItem deepCopy() {
    return new ProcessedItem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.fileName = null;
    this.uri = null;
    this.md5 = null;
    setSizeIsSet(false);
    this.size = 0;
    this.mediaType = null;
    setEncryptedIsSet(false);
    this.encrypted = false;
    setDecryptedIsSet(false);
    this.decrypted = false;
    this.password = null;
    this.certificate = null;
    this.rawData = null;
    this.contactName = null;
    this.nativeID = null;
    this.documentID = null;
    this.parentDocumentID = null;
    this.geoLocation = null;
    this.endAttach = null;
    this.textSnippet = null;
    setRecoveredIsSet(false);
    this.recovered = false;
    setOrphanIsSet(false);
    this.orphan = false;
    setEmbeddedImageIsSet(false);
    this.embeddedImage = false;
    this.fsPath = null;
    setIsTopLevelParentIsSet(false);
    this.isTopLevelParent = false;
    this.binaryFile = null;
    this.textFile = null;
    this.contentCreated = null;
    this.contentLastModified = null;
    this.contentLastAccessed = null;
    this.fileCreated = null;
    this.fileLastModified = null;
    this.fileLastAccessed = null;
    this.lastPrinted = null;
    this.sent = null;
    this.received = null;
    this.visited = null;
    this.called = null;
    this.started = null;
    this.ended = null;
    this.due = null;
    this.deleted = null;
    this.title = null;
    this.subject = null;
    setPageCountIsSet(false);
    this.pageCount = 0;
    this.creators = null;
    this.contributors = null;
    this.organization = null;
    setEmptyDocumentIsSet(false);
    this.emptyDocument = false;
    this.messageID = null;
    this.messageHeaders = null;
    this.conversationIndexSet = null;
    this.messageFrom = null;
    this.messageSenders = null;
    this.messageTo = null;
    this.messageCc = null;
    this.messageBcc = null;
    this.chatSenders = null;
    this.chatReceivers = null;
    this.chatAccounts = null;
    setIsReadIsSet(false);
    this.isRead = false;
    setDurationSecondsIsSet(false);
    this.durationSeconds = 0;
    this.incomingPhoneNumbers = null;
    this.outgoingPhoneNumbers = null;
    this.allPhoneNumbers = null;
    this.sourceIP = null;
    setMessageCountIsSet(false);
    this.messageCount = 0;
    this.chatProtocol = null;
    this.chatConversationId = null;
    this.intellaChatConversationId = null;
    this.chatConversationTitle = null;
    this.visitedUrl = null;
  }

  public long getId() {
    return this.id;
  }

  public ProcessedItem setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileName() {
    return this.fileName;
  }

  public ProcessedItem setFileName(@org.apache.thrift.annotation.Nullable java.lang.String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUri() {
    return this.uri;
  }

  public ProcessedItem setUri(@org.apache.thrift.annotation.Nullable java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMd5() {
    return this.md5;
  }

  public ProcessedItem setMd5(@org.apache.thrift.annotation.Nullable java.lang.String md5) {
    this.md5 = md5;
    return this;
  }

  public void unsetMd5() {
    this.md5 = null;
  }

  /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
  public boolean isSetMd5() {
    return this.md5 != null;
  }

  public void setMd5IsSet(boolean value) {
    if (!value) {
      this.md5 = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public ProcessedItem setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMediaType() {
    return this.mediaType;
  }

  public ProcessedItem setMediaType(@org.apache.thrift.annotation.Nullable java.lang.String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  public void unsetMediaType() {
    this.mediaType = null;
  }

  /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaType() {
    return this.mediaType != null;
  }

  public void setMediaTypeIsSet(boolean value) {
    if (!value) {
      this.mediaType = null;
    }
  }

  public boolean isEncrypted() {
    return this.encrypted;
  }

  public ProcessedItem setEncrypted(boolean encrypted) {
    this.encrypted = encrypted;
    setEncryptedIsSet(true);
    return this;
  }

  public void unsetEncrypted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCRYPTED_ISSET_ID);
  }

  /** Returns true if field encrypted is set (has been assigned a value) and false otherwise */
  public boolean isSetEncrypted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCRYPTED_ISSET_ID);
  }

  public void setEncryptedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCRYPTED_ISSET_ID, value);
  }

  public boolean isDecrypted() {
    return this.decrypted;
  }

  public ProcessedItem setDecrypted(boolean decrypted) {
    this.decrypted = decrypted;
    setDecryptedIsSet(true);
    return this;
  }

  public void unsetDecrypted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DECRYPTED_ISSET_ID);
  }

  /** Returns true if field decrypted is set (has been assigned a value) and false otherwise */
  public boolean isSetDecrypted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DECRYPTED_ISSET_ID);
  }

  public void setDecryptedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DECRYPTED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public ProcessedItem setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCertificate() {
    return this.certificate;
  }

  public ProcessedItem setCertificate(@org.apache.thrift.annotation.Nullable java.lang.String certificate) {
    this.certificate = certificate;
    return this;
  }

  public void unsetCertificate() {
    this.certificate = null;
  }

  /** Returns true if field certificate is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificate() {
    return this.certificate != null;
  }

  public void setCertificateIsSet(boolean value) {
    if (!value) {
      this.certificate = null;
    }
  }

  public int getRawDataSize() {
    return (this.rawData == null) ? 0 : this.rawData.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<RawDataEntry> getRawDataIterator() {
    return (this.rawData == null) ? null : this.rawData.iterator();
  }

  public void addToRawData(RawDataEntry elem) {
    if (this.rawData == null) {
      this.rawData = new java.util.ArrayList<RawDataEntry>();
    }
    this.rawData.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<RawDataEntry> getRawData() {
    return this.rawData;
  }

  public ProcessedItem setRawData(@org.apache.thrift.annotation.Nullable java.util.List<RawDataEntry> rawData) {
    this.rawData = rawData;
    return this;
  }

  public void unsetRawData() {
    this.rawData = null;
  }

  /** Returns true if field rawData is set (has been assigned a value) and false otherwise */
  public boolean isSetRawData() {
    return this.rawData != null;
  }

  public void setRawDataIsSet(boolean value) {
    if (!value) {
      this.rawData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContactName() {
    return this.contactName;
  }

  public ProcessedItem setContactName(@org.apache.thrift.annotation.Nullable java.lang.String contactName) {
    this.contactName = contactName;
    return this;
  }

  public void unsetContactName() {
    this.contactName = null;
  }

  /** Returns true if field contactName is set (has been assigned a value) and false otherwise */
  public boolean isSetContactName() {
    return this.contactName != null;
  }

  public void setContactNameIsSet(boolean value) {
    if (!value) {
      this.contactName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNativeID() {
    return this.nativeID;
  }

  public ProcessedItem setNativeID(@org.apache.thrift.annotation.Nullable java.lang.String nativeID) {
    this.nativeID = nativeID;
    return this;
  }

  public void unsetNativeID() {
    this.nativeID = null;
  }

  /** Returns true if field nativeID is set (has been assigned a value) and false otherwise */
  public boolean isSetNativeID() {
    return this.nativeID != null;
  }

  public void setNativeIDIsSet(boolean value) {
    if (!value) {
      this.nativeID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDocumentID() {
    return this.documentID;
  }

  public ProcessedItem setDocumentID(@org.apache.thrift.annotation.Nullable java.lang.String documentID) {
    this.documentID = documentID;
    return this;
  }

  public void unsetDocumentID() {
    this.documentID = null;
  }

  /** Returns true if field documentID is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentID() {
    return this.documentID != null;
  }

  public void setDocumentIDIsSet(boolean value) {
    if (!value) {
      this.documentID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentDocumentID() {
    return this.parentDocumentID;
  }

  public ProcessedItem setParentDocumentID(@org.apache.thrift.annotation.Nullable java.lang.String parentDocumentID) {
    this.parentDocumentID = parentDocumentID;
    return this;
  }

  public void unsetParentDocumentID() {
    this.parentDocumentID = null;
  }

  /** Returns true if field parentDocumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetParentDocumentID() {
    return this.parentDocumentID != null;
  }

  public void setParentDocumentIDIsSet(boolean value) {
    if (!value) {
      this.parentDocumentID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public GeoLocation getGeoLocation() {
    return this.geoLocation;
  }

  public ProcessedItem setGeoLocation(@org.apache.thrift.annotation.Nullable GeoLocation geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  public void unsetGeoLocation() {
    this.geoLocation = null;
  }

  /** Returns true if field geoLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoLocation() {
    return this.geoLocation != null;
  }

  public void setGeoLocationIsSet(boolean value) {
    if (!value) {
      this.geoLocation = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEndAttach() {
    return this.endAttach;
  }

  public ProcessedItem setEndAttach(@org.apache.thrift.annotation.Nullable java.lang.String endAttach) {
    this.endAttach = endAttach;
    return this;
  }

  public void unsetEndAttach() {
    this.endAttach = null;
  }

  /** Returns true if field endAttach is set (has been assigned a value) and false otherwise */
  public boolean isSetEndAttach() {
    return this.endAttach != null;
  }

  public void setEndAttachIsSet(boolean value) {
    if (!value) {
      this.endAttach = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTextSnippet() {
    return this.textSnippet;
  }

  public ProcessedItem setTextSnippet(@org.apache.thrift.annotation.Nullable java.lang.String textSnippet) {
    this.textSnippet = textSnippet;
    return this;
  }

  public void unsetTextSnippet() {
    this.textSnippet = null;
  }

  /** Returns true if field textSnippet is set (has been assigned a value) and false otherwise */
  public boolean isSetTextSnippet() {
    return this.textSnippet != null;
  }

  public void setTextSnippetIsSet(boolean value) {
    if (!value) {
      this.textSnippet = null;
    }
  }

  public boolean isRecovered() {
    return this.recovered;
  }

  public ProcessedItem setRecovered(boolean recovered) {
    this.recovered = recovered;
    setRecoveredIsSet(true);
    return this;
  }

  public void unsetRecovered() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOVERED_ISSET_ID);
  }

  /** Returns true if field recovered is set (has been assigned a value) and false otherwise */
  public boolean isSetRecovered() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOVERED_ISSET_ID);
  }

  public void setRecoveredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOVERED_ISSET_ID, value);
  }

  public boolean isOrphan() {
    return this.orphan;
  }

  public ProcessedItem setOrphan(boolean orphan) {
    this.orphan = orphan;
    setOrphanIsSet(true);
    return this;
  }

  public void unsetOrphan() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORPHAN_ISSET_ID);
  }

  /** Returns true if field orphan is set (has been assigned a value) and false otherwise */
  public boolean isSetOrphan() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORPHAN_ISSET_ID);
  }

  public void setOrphanIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORPHAN_ISSET_ID, value);
  }

  public boolean isEmbeddedImage() {
    return this.embeddedImage;
  }

  public ProcessedItem setEmbeddedImage(boolean embeddedImage) {
    this.embeddedImage = embeddedImage;
    setEmbeddedImageIsSet(true);
    return this;
  }

  public void unsetEmbeddedImage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMBEDDEDIMAGE_ISSET_ID);
  }

  /** Returns true if field embeddedImage is set (has been assigned a value) and false otherwise */
  public boolean isSetEmbeddedImage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMBEDDEDIMAGE_ISSET_ID);
  }

  public void setEmbeddedImageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMBEDDEDIMAGE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFsPath() {
    return this.fsPath;
  }

  public ProcessedItem setFsPath(@org.apache.thrift.annotation.Nullable java.lang.String fsPath) {
    this.fsPath = fsPath;
    return this;
  }

  public void unsetFsPath() {
    this.fsPath = null;
  }

  /** Returns true if field fsPath is set (has been assigned a value) and false otherwise */
  public boolean isSetFsPath() {
    return this.fsPath != null;
  }

  public void setFsPathIsSet(boolean value) {
    if (!value) {
      this.fsPath = null;
    }
  }

  public boolean isIsTopLevelParent() {
    return this.isTopLevelParent;
  }

  public ProcessedItem setIsTopLevelParent(boolean isTopLevelParent) {
    this.isTopLevelParent = isTopLevelParent;
    setIsTopLevelParentIsSet(true);
    return this;
  }

  public void unsetIsTopLevelParent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTOPLEVELPARENT_ISSET_ID);
  }

  /** Returns true if field isTopLevelParent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTopLevelParent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTOPLEVELPARENT_ISSET_ID);
  }

  public void setIsTopLevelParentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTOPLEVELPARENT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBinaryFile() {
    return this.binaryFile;
  }

  public ProcessedItem setBinaryFile(@org.apache.thrift.annotation.Nullable java.lang.String binaryFile) {
    this.binaryFile = binaryFile;
    return this;
  }

  public void unsetBinaryFile() {
    this.binaryFile = null;
  }

  /** Returns true if field binaryFile is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryFile() {
    return this.binaryFile != null;
  }

  public void setBinaryFileIsSet(boolean value) {
    if (!value) {
      this.binaryFile = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTextFile() {
    return this.textFile;
  }

  public ProcessedItem setTextFile(@org.apache.thrift.annotation.Nullable java.lang.String textFile) {
    this.textFile = textFile;
    return this;
  }

  public void unsetTextFile() {
    this.textFile = null;
  }

  /** Returns true if field textFile is set (has been assigned a value) and false otherwise */
  public boolean isSetTextFile() {
    return this.textFile != null;
  }

  public void setTextFileIsSet(boolean value) {
    if (!value) {
      this.textFile = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getContentCreated() {
    return this.contentCreated;
  }

  public ProcessedItem setContentCreated(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime contentCreated) {
    this.contentCreated = contentCreated;
    return this;
  }

  public void unsetContentCreated() {
    this.contentCreated = null;
  }

  /** Returns true if field contentCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetContentCreated() {
    return this.contentCreated != null;
  }

  public void setContentCreatedIsSet(boolean value) {
    if (!value) {
      this.contentCreated = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getContentLastModified() {
    return this.contentLastModified;
  }

  public ProcessedItem setContentLastModified(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime contentLastModified) {
    this.contentLastModified = contentLastModified;
    return this;
  }

  public void unsetContentLastModified() {
    this.contentLastModified = null;
  }

  /** Returns true if field contentLastModified is set (has been assigned a value) and false otherwise */
  public boolean isSetContentLastModified() {
    return this.contentLastModified != null;
  }

  public void setContentLastModifiedIsSet(boolean value) {
    if (!value) {
      this.contentLastModified = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getContentLastAccessed() {
    return this.contentLastAccessed;
  }

  public ProcessedItem setContentLastAccessed(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime contentLastAccessed) {
    this.contentLastAccessed = contentLastAccessed;
    return this;
  }

  public void unsetContentLastAccessed() {
    this.contentLastAccessed = null;
  }

  /** Returns true if field contentLastAccessed is set (has been assigned a value) and false otherwise */
  public boolean isSetContentLastAccessed() {
    return this.contentLastAccessed != null;
  }

  public void setContentLastAccessedIsSet(boolean value) {
    if (!value) {
      this.contentLastAccessed = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getFileCreated() {
    return this.fileCreated;
  }

  public ProcessedItem setFileCreated(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime fileCreated) {
    this.fileCreated = fileCreated;
    return this;
  }

  public void unsetFileCreated() {
    this.fileCreated = null;
  }

  /** Returns true if field fileCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetFileCreated() {
    return this.fileCreated != null;
  }

  public void setFileCreatedIsSet(boolean value) {
    if (!value) {
      this.fileCreated = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getFileLastModified() {
    return this.fileLastModified;
  }

  public ProcessedItem setFileLastModified(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime fileLastModified) {
    this.fileLastModified = fileLastModified;
    return this;
  }

  public void unsetFileLastModified() {
    this.fileLastModified = null;
  }

  /** Returns true if field fileLastModified is set (has been assigned a value) and false otherwise */
  public boolean isSetFileLastModified() {
    return this.fileLastModified != null;
  }

  public void setFileLastModifiedIsSet(boolean value) {
    if (!value) {
      this.fileLastModified = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getFileLastAccessed() {
    return this.fileLastAccessed;
  }

  public ProcessedItem setFileLastAccessed(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime fileLastAccessed) {
    this.fileLastAccessed = fileLastAccessed;
    return this;
  }

  public void unsetFileLastAccessed() {
    this.fileLastAccessed = null;
  }

  /** Returns true if field fileLastAccessed is set (has been assigned a value) and false otherwise */
  public boolean isSetFileLastAccessed() {
    return this.fileLastAccessed != null;
  }

  public void setFileLastAccessedIsSet(boolean value) {
    if (!value) {
      this.fileLastAccessed = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getLastPrinted() {
    return this.lastPrinted;
  }

  public ProcessedItem setLastPrinted(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime lastPrinted) {
    this.lastPrinted = lastPrinted;
    return this;
  }

  public void unsetLastPrinted() {
    this.lastPrinted = null;
  }

  /** Returns true if field lastPrinted is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrinted() {
    return this.lastPrinted != null;
  }

  public void setLastPrintedIsSet(boolean value) {
    if (!value) {
      this.lastPrinted = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getSent() {
    return this.sent;
  }

  public ProcessedItem setSent(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime sent) {
    this.sent = sent;
    return this;
  }

  public void unsetSent() {
    this.sent = null;
  }

  /** Returns true if field sent is set (has been assigned a value) and false otherwise */
  public boolean isSetSent() {
    return this.sent != null;
  }

  public void setSentIsSet(boolean value) {
    if (!value) {
      this.sent = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getReceived() {
    return this.received;
  }

  public ProcessedItem setReceived(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime received) {
    this.received = received;
    return this;
  }

  public void unsetReceived() {
    this.received = null;
  }

  /** Returns true if field received is set (has been assigned a value) and false otherwise */
  public boolean isSetReceived() {
    return this.received != null;
  }

  public void setReceivedIsSet(boolean value) {
    if (!value) {
      this.received = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getVisited() {
    return this.visited;
  }

  public ProcessedItem setVisited(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime visited) {
    this.visited = visited;
    return this;
  }

  public void unsetVisited() {
    this.visited = null;
  }

  /** Returns true if field visited is set (has been assigned a value) and false otherwise */
  public boolean isSetVisited() {
    return this.visited != null;
  }

  public void setVisitedIsSet(boolean value) {
    if (!value) {
      this.visited = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getCalled() {
    return this.called;
  }

  public ProcessedItem setCalled(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime called) {
    this.called = called;
    return this;
  }

  public void unsetCalled() {
    this.called = null;
  }

  /** Returns true if field called is set (has been assigned a value) and false otherwise */
  public boolean isSetCalled() {
    return this.called != null;
  }

  public void setCalledIsSet(boolean value) {
    if (!value) {
      this.called = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getStarted() {
    return this.started;
  }

  public ProcessedItem setStarted(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime started) {
    this.started = started;
    return this;
  }

  public void unsetStarted() {
    this.started = null;
  }

  /** Returns true if field started is set (has been assigned a value) and false otherwise */
  public boolean isSetStarted() {
    return this.started != null;
  }

  public void setStartedIsSet(boolean value) {
    if (!value) {
      this.started = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getEnded() {
    return this.ended;
  }

  public ProcessedItem setEnded(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime ended) {
    this.ended = ended;
    return this;
  }

  public void unsetEnded() {
    this.ended = null;
  }

  /** Returns true if field ended is set (has been assigned a value) and false otherwise */
  public boolean isSetEnded() {
    return this.ended != null;
  }

  public void setEndedIsSet(boolean value) {
    if (!value) {
      this.ended = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getDue() {
    return this.due;
  }

  public ProcessedItem setDue(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime due) {
    this.due = due;
    return this;
  }

  public void unsetDue() {
    this.due = null;
  }

  /** Returns true if field due is set (has been assigned a value) and false otherwise */
  public boolean isSetDue() {
    return this.due != null;
  }

  public void setDueIsSet(boolean value) {
    if (!value) {
      this.due = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ScriptTZonedDateTime getDeleted() {
    return this.deleted;
  }

  public ProcessedItem setDeleted(@org.apache.thrift.annotation.Nullable ScriptTZonedDateTime deleted) {
    this.deleted = deleted;
    return this;
  }

  public void unsetDeleted() {
    this.deleted = null;
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return this.deleted != null;
  }

  public void setDeletedIsSet(boolean value) {
    if (!value) {
      this.deleted = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public ProcessedItem setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSubject() {
    return this.subject;
  }

  public ProcessedItem setSubject(@org.apache.thrift.annotation.Nullable java.lang.String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public int getPageCount() {
    return this.pageCount;
  }

  public ProcessedItem setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    return this;
  }

  public void unsetPageCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
  }

  public int getCreatorsSize() {
    return (this.creators == null) ? 0 : this.creators.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getCreatorsIterator() {
    return (this.creators == null) ? null : this.creators.iterator();
  }

  public void addToCreators(PersonAccount elem) {
    if (this.creators == null) {
      this.creators = new java.util.ArrayList<PersonAccount>();
    }
    this.creators.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PersonAccount> getCreators() {
    return this.creators;
  }

  public ProcessedItem setCreators(@org.apache.thrift.annotation.Nullable java.util.List<PersonAccount> creators) {
    this.creators = creators;
    return this;
  }

  public void unsetCreators() {
    this.creators = null;
  }

  /** Returns true if field creators is set (has been assigned a value) and false otherwise */
  public boolean isSetCreators() {
    return this.creators != null;
  }

  public void setCreatorsIsSet(boolean value) {
    if (!value) {
      this.creators = null;
    }
  }

  public int getContributorsSize() {
    return (this.contributors == null) ? 0 : this.contributors.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getContributorsIterator() {
    return (this.contributors == null) ? null : this.contributors.iterator();
  }

  public void addToContributors(PersonAccount elem) {
    if (this.contributors == null) {
      this.contributors = new java.util.ArrayList<PersonAccount>();
    }
    this.contributors.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PersonAccount> getContributors() {
    return this.contributors;
  }

  public ProcessedItem setContributors(@org.apache.thrift.annotation.Nullable java.util.List<PersonAccount> contributors) {
    this.contributors = contributors;
    return this;
  }

  public void unsetContributors() {
    this.contributors = null;
  }

  /** Returns true if field contributors is set (has been assigned a value) and false otherwise */
  public boolean isSetContributors() {
    return this.contributors != null;
  }

  public void setContributorsIsSet(boolean value) {
    if (!value) {
      this.contributors = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOrganization() {
    return this.organization;
  }

  public ProcessedItem setOrganization(@org.apache.thrift.annotation.Nullable java.lang.String organization) {
    this.organization = organization;
    return this;
  }

  public void unsetOrganization() {
    this.organization = null;
  }

  /** Returns true if field organization is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganization() {
    return this.organization != null;
  }

  public void setOrganizationIsSet(boolean value) {
    if (!value) {
      this.organization = null;
    }
  }

  public boolean isEmptyDocument() {
    return this.emptyDocument;
  }

  public ProcessedItem setEmptyDocument(boolean emptyDocument) {
    this.emptyDocument = emptyDocument;
    setEmptyDocumentIsSet(true);
    return this;
  }

  public void unsetEmptyDocument() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPTYDOCUMENT_ISSET_ID);
  }

  /** Returns true if field emptyDocument is set (has been assigned a value) and false otherwise */
  public boolean isSetEmptyDocument() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPTYDOCUMENT_ISSET_ID);
  }

  public void setEmptyDocumentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPTYDOCUMENT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMessageID() {
    return this.messageID;
  }

  public ProcessedItem setMessageID(@org.apache.thrift.annotation.Nullable java.lang.String messageID) {
    this.messageID = messageID;
    return this;
  }

  public void unsetMessageID() {
    this.messageID = null;
  }

  /** Returns true if field messageID is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageID() {
    return this.messageID != null;
  }

  public void setMessageIDIsSet(boolean value) {
    if (!value) {
      this.messageID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMessageHeaders() {
    return this.messageHeaders;
  }

  public ProcessedItem setMessageHeaders(@org.apache.thrift.annotation.Nullable java.lang.String messageHeaders) {
    this.messageHeaders = messageHeaders;
    return this;
  }

  public void unsetMessageHeaders() {
    this.messageHeaders = null;
  }

  /** Returns true if field messageHeaders is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageHeaders() {
    return this.messageHeaders != null;
  }

  public void setMessageHeadersIsSet(boolean value) {
    if (!value) {
      this.messageHeaders = null;
    }
  }

  public int getConversationIndexSetSize() {
    return (this.conversationIndexSet == null) ? 0 : this.conversationIndexSet.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getConversationIndexSetIterator() {
    return (this.conversationIndexSet == null) ? null : this.conversationIndexSet.iterator();
  }

  public void addToConversationIndexSet(java.lang.String elem) {
    if (this.conversationIndexSet == null) {
      this.conversationIndexSet = new java.util.HashSet<java.lang.String>();
    }
    this.conversationIndexSet.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getConversationIndexSet() {
    return this.conversationIndexSet;
  }

  public ProcessedItem setConversationIndexSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> conversationIndexSet) {
    this.conversationIndexSet = conversationIndexSet;
    return this;
  }

  public void unsetConversationIndexSet() {
    this.conversationIndexSet = null;
  }

  /** Returns true if field conversationIndexSet is set (has been assigned a value) and false otherwise */
  public boolean isSetConversationIndexSet() {
    return this.conversationIndexSet != null;
  }

  public void setConversationIndexSetIsSet(boolean value) {
    if (!value) {
      this.conversationIndexSet = null;
    }
  }

  public int getMessageFromSize() {
    return (this.messageFrom == null) ? 0 : this.messageFrom.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getMessageFromIterator() {
    return (this.messageFrom == null) ? null : this.messageFrom.iterator();
  }

  public void addToMessageFrom(PersonAccount elem) {
    if (this.messageFrom == null) {
      this.messageFrom = new java.util.HashSet<PersonAccount>();
    }
    this.messageFrom.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getMessageFrom() {
    return this.messageFrom;
  }

  public ProcessedItem setMessageFrom(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageFrom) {
    this.messageFrom = messageFrom;
    return this;
  }

  public void unsetMessageFrom() {
    this.messageFrom = null;
  }

  /** Returns true if field messageFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageFrom() {
    return this.messageFrom != null;
  }

  public void setMessageFromIsSet(boolean value) {
    if (!value) {
      this.messageFrom = null;
    }
  }

  public int getMessageSendersSize() {
    return (this.messageSenders == null) ? 0 : this.messageSenders.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getMessageSendersIterator() {
    return (this.messageSenders == null) ? null : this.messageSenders.iterator();
  }

  public void addToMessageSenders(PersonAccount elem) {
    if (this.messageSenders == null) {
      this.messageSenders = new java.util.HashSet<PersonAccount>();
    }
    this.messageSenders.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getMessageSenders() {
    return this.messageSenders;
  }

  public ProcessedItem setMessageSenders(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageSenders) {
    this.messageSenders = messageSenders;
    return this;
  }

  public void unsetMessageSenders() {
    this.messageSenders = null;
  }

  /** Returns true if field messageSenders is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageSenders() {
    return this.messageSenders != null;
  }

  public void setMessageSendersIsSet(boolean value) {
    if (!value) {
      this.messageSenders = null;
    }
  }

  public int getMessageToSize() {
    return (this.messageTo == null) ? 0 : this.messageTo.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getMessageToIterator() {
    return (this.messageTo == null) ? null : this.messageTo.iterator();
  }

  public void addToMessageTo(PersonAccount elem) {
    if (this.messageTo == null) {
      this.messageTo = new java.util.HashSet<PersonAccount>();
    }
    this.messageTo.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getMessageTo() {
    return this.messageTo;
  }

  public ProcessedItem setMessageTo(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageTo) {
    this.messageTo = messageTo;
    return this;
  }

  public void unsetMessageTo() {
    this.messageTo = null;
  }

  /** Returns true if field messageTo is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageTo() {
    return this.messageTo != null;
  }

  public void setMessageToIsSet(boolean value) {
    if (!value) {
      this.messageTo = null;
    }
  }

  public int getMessageCcSize() {
    return (this.messageCc == null) ? 0 : this.messageCc.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getMessageCcIterator() {
    return (this.messageCc == null) ? null : this.messageCc.iterator();
  }

  public void addToMessageCc(PersonAccount elem) {
    if (this.messageCc == null) {
      this.messageCc = new java.util.HashSet<PersonAccount>();
    }
    this.messageCc.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getMessageCc() {
    return this.messageCc;
  }

  public ProcessedItem setMessageCc(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageCc) {
    this.messageCc = messageCc;
    return this;
  }

  public void unsetMessageCc() {
    this.messageCc = null;
  }

  /** Returns true if field messageCc is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageCc() {
    return this.messageCc != null;
  }

  public void setMessageCcIsSet(boolean value) {
    if (!value) {
      this.messageCc = null;
    }
  }

  public int getMessageBccSize() {
    return (this.messageBcc == null) ? 0 : this.messageBcc.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getMessageBccIterator() {
    return (this.messageBcc == null) ? null : this.messageBcc.iterator();
  }

  public void addToMessageBcc(PersonAccount elem) {
    if (this.messageBcc == null) {
      this.messageBcc = new java.util.HashSet<PersonAccount>();
    }
    this.messageBcc.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getMessageBcc() {
    return this.messageBcc;
  }

  public ProcessedItem setMessageBcc(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> messageBcc) {
    this.messageBcc = messageBcc;
    return this;
  }

  public void unsetMessageBcc() {
    this.messageBcc = null;
  }

  /** Returns true if field messageBcc is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageBcc() {
    return this.messageBcc != null;
  }

  public void setMessageBccIsSet(boolean value) {
    if (!value) {
      this.messageBcc = null;
    }
  }

  public int getChatSendersSize() {
    return (this.chatSenders == null) ? 0 : this.chatSenders.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getChatSendersIterator() {
    return (this.chatSenders == null) ? null : this.chatSenders.iterator();
  }

  public void addToChatSenders(PersonAccount elem) {
    if (this.chatSenders == null) {
      this.chatSenders = new java.util.HashSet<PersonAccount>();
    }
    this.chatSenders.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getChatSenders() {
    return this.chatSenders;
  }

  public ProcessedItem setChatSenders(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> chatSenders) {
    this.chatSenders = chatSenders;
    return this;
  }

  public void unsetChatSenders() {
    this.chatSenders = null;
  }

  /** Returns true if field chatSenders is set (has been assigned a value) and false otherwise */
  public boolean isSetChatSenders() {
    return this.chatSenders != null;
  }

  public void setChatSendersIsSet(boolean value) {
    if (!value) {
      this.chatSenders = null;
    }
  }

  public int getChatReceiversSize() {
    return (this.chatReceivers == null) ? 0 : this.chatReceivers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getChatReceiversIterator() {
    return (this.chatReceivers == null) ? null : this.chatReceivers.iterator();
  }

  public void addToChatReceivers(PersonAccount elem) {
    if (this.chatReceivers == null) {
      this.chatReceivers = new java.util.HashSet<PersonAccount>();
    }
    this.chatReceivers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getChatReceivers() {
    return this.chatReceivers;
  }

  public ProcessedItem setChatReceivers(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> chatReceivers) {
    this.chatReceivers = chatReceivers;
    return this;
  }

  public void unsetChatReceivers() {
    this.chatReceivers = null;
  }

  /** Returns true if field chatReceivers is set (has been assigned a value) and false otherwise */
  public boolean isSetChatReceivers() {
    return this.chatReceivers != null;
  }

  public void setChatReceiversIsSet(boolean value) {
    if (!value) {
      this.chatReceivers = null;
    }
  }

  public int getChatAccountsSize() {
    return (this.chatAccounts == null) ? 0 : this.chatAccounts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getChatAccountsIterator() {
    return (this.chatAccounts == null) ? null : this.chatAccounts.iterator();
  }

  public void addToChatAccounts(PersonAccount elem) {
    if (this.chatAccounts == null) {
      this.chatAccounts = new java.util.HashSet<PersonAccount>();
    }
    this.chatAccounts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getChatAccounts() {
    return this.chatAccounts;
  }

  public ProcessedItem setChatAccounts(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> chatAccounts) {
    this.chatAccounts = chatAccounts;
    return this;
  }

  public void unsetChatAccounts() {
    this.chatAccounts = null;
  }

  /** Returns true if field chatAccounts is set (has been assigned a value) and false otherwise */
  public boolean isSetChatAccounts() {
    return this.chatAccounts != null;
  }

  public void setChatAccountsIsSet(boolean value) {
    if (!value) {
      this.chatAccounts = null;
    }
  }

  public boolean isIsRead() {
    return this.isRead;
  }

  public ProcessedItem setIsRead(boolean isRead) {
    this.isRead = isRead;
    setIsReadIsSet(true);
    return this;
  }

  public void unsetIsRead() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREAD_ISSET_ID);
  }

  /** Returns true if field isRead is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRead() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREAD_ISSET_ID);
  }

  public void setIsReadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREAD_ISSET_ID, value);
  }

  public int getDurationSeconds() {
    return this.durationSeconds;
  }

  public ProcessedItem setDurationSeconds(int durationSeconds) {
    this.durationSeconds = durationSeconds;
    setDurationSecondsIsSet(true);
    return this;
  }

  public void unsetDurationSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DURATIONSECONDS_ISSET_ID);
  }

  /** Returns true if field durationSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DURATIONSECONDS_ISSET_ID);
  }

  public void setDurationSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DURATIONSECONDS_ISSET_ID, value);
  }

  public int getIncomingPhoneNumbersSize() {
    return (this.incomingPhoneNumbers == null) ? 0 : this.incomingPhoneNumbers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getIncomingPhoneNumbersIterator() {
    return (this.incomingPhoneNumbers == null) ? null : this.incomingPhoneNumbers.iterator();
  }

  public void addToIncomingPhoneNumbers(PersonAccount elem) {
    if (this.incomingPhoneNumbers == null) {
      this.incomingPhoneNumbers = new java.util.HashSet<PersonAccount>();
    }
    this.incomingPhoneNumbers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getIncomingPhoneNumbers() {
    return this.incomingPhoneNumbers;
  }

  public ProcessedItem setIncomingPhoneNumbers(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> incomingPhoneNumbers) {
    this.incomingPhoneNumbers = incomingPhoneNumbers;
    return this;
  }

  public void unsetIncomingPhoneNumbers() {
    this.incomingPhoneNumbers = null;
  }

  /** Returns true if field incomingPhoneNumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomingPhoneNumbers() {
    return this.incomingPhoneNumbers != null;
  }

  public void setIncomingPhoneNumbersIsSet(boolean value) {
    if (!value) {
      this.incomingPhoneNumbers = null;
    }
  }

  public int getOutgoingPhoneNumbersSize() {
    return (this.outgoingPhoneNumbers == null) ? 0 : this.outgoingPhoneNumbers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getOutgoingPhoneNumbersIterator() {
    return (this.outgoingPhoneNumbers == null) ? null : this.outgoingPhoneNumbers.iterator();
  }

  public void addToOutgoingPhoneNumbers(PersonAccount elem) {
    if (this.outgoingPhoneNumbers == null) {
      this.outgoingPhoneNumbers = new java.util.HashSet<PersonAccount>();
    }
    this.outgoingPhoneNumbers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getOutgoingPhoneNumbers() {
    return this.outgoingPhoneNumbers;
  }

  public ProcessedItem setOutgoingPhoneNumbers(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> outgoingPhoneNumbers) {
    this.outgoingPhoneNumbers = outgoingPhoneNumbers;
    return this;
  }

  public void unsetOutgoingPhoneNumbers() {
    this.outgoingPhoneNumbers = null;
  }

  /** Returns true if field outgoingPhoneNumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetOutgoingPhoneNumbers() {
    return this.outgoingPhoneNumbers != null;
  }

  public void setOutgoingPhoneNumbersIsSet(boolean value) {
    if (!value) {
      this.outgoingPhoneNumbers = null;
    }
  }

  public int getAllPhoneNumbersSize() {
    return (this.allPhoneNumbers == null) ? 0 : this.allPhoneNumbers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PersonAccount> getAllPhoneNumbersIterator() {
    return (this.allPhoneNumbers == null) ? null : this.allPhoneNumbers.iterator();
  }

  public void addToAllPhoneNumbers(PersonAccount elem) {
    if (this.allPhoneNumbers == null) {
      this.allPhoneNumbers = new java.util.HashSet<PersonAccount>();
    }
    this.allPhoneNumbers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<PersonAccount> getAllPhoneNumbers() {
    return this.allPhoneNumbers;
  }

  public ProcessedItem setAllPhoneNumbers(@org.apache.thrift.annotation.Nullable java.util.Set<PersonAccount> allPhoneNumbers) {
    this.allPhoneNumbers = allPhoneNumbers;
    return this;
  }

  public void unsetAllPhoneNumbers() {
    this.allPhoneNumbers = null;
  }

  /** Returns true if field allPhoneNumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetAllPhoneNumbers() {
    return this.allPhoneNumbers != null;
  }

  public void setAllPhoneNumbersIsSet(boolean value) {
    if (!value) {
      this.allPhoneNumbers = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSourceIP() {
    return this.sourceIP;
  }

  public ProcessedItem setSourceIP(@org.apache.thrift.annotation.Nullable java.lang.String sourceIP) {
    this.sourceIP = sourceIP;
    return this;
  }

  public void unsetSourceIP() {
    this.sourceIP = null;
  }

  /** Returns true if field sourceIP is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceIP() {
    return this.sourceIP != null;
  }

  public void setSourceIPIsSet(boolean value) {
    if (!value) {
      this.sourceIP = null;
    }
  }

  public int getMessageCount() {
    return this.messageCount;
  }

  public ProcessedItem setMessageCount(int messageCount) {
    this.messageCount = messageCount;
    setMessageCountIsSet(true);
    return this;
  }

  public void unsetMessageCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MESSAGECOUNT_ISSET_ID);
  }

  /** Returns true if field messageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MESSAGECOUNT_ISSET_ID);
  }

  public void setMessageCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MESSAGECOUNT_ISSET_ID, value);
  }

  public int getChatProtocolSize() {
    return (this.chatProtocol == null) ? 0 : this.chatProtocol.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getChatProtocolIterator() {
    return (this.chatProtocol == null) ? null : this.chatProtocol.iterator();
  }

  public void addToChatProtocol(java.lang.String elem) {
    if (this.chatProtocol == null) {
      this.chatProtocol = new java.util.HashSet<java.lang.String>();
    }
    this.chatProtocol.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getChatProtocol() {
    return this.chatProtocol;
  }

  public ProcessedItem setChatProtocol(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> chatProtocol) {
    this.chatProtocol = chatProtocol;
    return this;
  }

  public void unsetChatProtocol() {
    this.chatProtocol = null;
  }

  /** Returns true if field chatProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetChatProtocol() {
    return this.chatProtocol != null;
  }

  public void setChatProtocolIsSet(boolean value) {
    if (!value) {
      this.chatProtocol = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatConversationId() {
    return this.chatConversationId;
  }

  public ProcessedItem setChatConversationId(@org.apache.thrift.annotation.Nullable java.lang.String chatConversationId) {
    this.chatConversationId = chatConversationId;
    return this;
  }

  public void unsetChatConversationId() {
    this.chatConversationId = null;
  }

  /** Returns true if field chatConversationId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatConversationId() {
    return this.chatConversationId != null;
  }

  public void setChatConversationIdIsSet(boolean value) {
    if (!value) {
      this.chatConversationId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIntellaChatConversationId() {
    return this.intellaChatConversationId;
  }

  public ProcessedItem setIntellaChatConversationId(@org.apache.thrift.annotation.Nullable java.lang.String intellaChatConversationId) {
    this.intellaChatConversationId = intellaChatConversationId;
    return this;
  }

  public void unsetIntellaChatConversationId() {
    this.intellaChatConversationId = null;
  }

  /** Returns true if field intellaChatConversationId is set (has been assigned a value) and false otherwise */
  public boolean isSetIntellaChatConversationId() {
    return this.intellaChatConversationId != null;
  }

  public void setIntellaChatConversationIdIsSet(boolean value) {
    if (!value) {
      this.intellaChatConversationId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatConversationTitle() {
    return this.chatConversationTitle;
  }

  public ProcessedItem setChatConversationTitle(@org.apache.thrift.annotation.Nullable java.lang.String chatConversationTitle) {
    this.chatConversationTitle = chatConversationTitle;
    return this;
  }

  public void unsetChatConversationTitle() {
    this.chatConversationTitle = null;
  }

  /** Returns true if field chatConversationTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetChatConversationTitle() {
    return this.chatConversationTitle != null;
  }

  public void setChatConversationTitleIsSet(boolean value) {
    if (!value) {
      this.chatConversationTitle = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVisitedUrl() {
    return this.visitedUrl;
  }

  public ProcessedItem setVisitedUrl(@org.apache.thrift.annotation.Nullable java.lang.String visitedUrl) {
    this.visitedUrl = visitedUrl;
    return this;
  }

  public void unsetVisitedUrl() {
    this.visitedUrl = null;
  }

  /** Returns true if field visitedUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitedUrl() {
    return this.visitedUrl != null;
  }

  public void setVisitedUrlIsSet(boolean value) {
    if (!value) {
      this.visitedUrl = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((java.lang.String)value);
      }
      break;

    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((java.lang.String)value);
      }
      break;

    case MD5:
      if (value == null) {
        unsetMd5();
      } else {
        setMd5((java.lang.String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((java.lang.Long)value);
      }
      break;

    case MEDIA_TYPE:
      if (value == null) {
        unsetMediaType();
      } else {
        setMediaType((java.lang.String)value);
      }
      break;

    case ENCRYPTED:
      if (value == null) {
        unsetEncrypted();
      } else {
        setEncrypted((java.lang.Boolean)value);
      }
      break;

    case DECRYPTED:
      if (value == null) {
        unsetDecrypted();
      } else {
        setDecrypted((java.lang.Boolean)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case CERTIFICATE:
      if (value == null) {
        unsetCertificate();
      } else {
        setCertificate((java.lang.String)value);
      }
      break;

    case RAW_DATA:
      if (value == null) {
        unsetRawData();
      } else {
        setRawData((java.util.List<RawDataEntry>)value);
      }
      break;

    case CONTACT_NAME:
      if (value == null) {
        unsetContactName();
      } else {
        setContactName((java.lang.String)value);
      }
      break;

    case NATIVE_ID:
      if (value == null) {
        unsetNativeID();
      } else {
        setNativeID((java.lang.String)value);
      }
      break;

    case DOCUMENT_ID:
      if (value == null) {
        unsetDocumentID();
      } else {
        setDocumentID((java.lang.String)value);
      }
      break;

    case PARENT_DOCUMENT_ID:
      if (value == null) {
        unsetParentDocumentID();
      } else {
        setParentDocumentID((java.lang.String)value);
      }
      break;

    case GEO_LOCATION:
      if (value == null) {
        unsetGeoLocation();
      } else {
        setGeoLocation((GeoLocation)value);
      }
      break;

    case END_ATTACH:
      if (value == null) {
        unsetEndAttach();
      } else {
        setEndAttach((java.lang.String)value);
      }
      break;

    case TEXT_SNIPPET:
      if (value == null) {
        unsetTextSnippet();
      } else {
        setTextSnippet((java.lang.String)value);
      }
      break;

    case RECOVERED:
      if (value == null) {
        unsetRecovered();
      } else {
        setRecovered((java.lang.Boolean)value);
      }
      break;

    case ORPHAN:
      if (value == null) {
        unsetOrphan();
      } else {
        setOrphan((java.lang.Boolean)value);
      }
      break;

    case EMBEDDED_IMAGE:
      if (value == null) {
        unsetEmbeddedImage();
      } else {
        setEmbeddedImage((java.lang.Boolean)value);
      }
      break;

    case FS_PATH:
      if (value == null) {
        unsetFsPath();
      } else {
        setFsPath((java.lang.String)value);
      }
      break;

    case IS_TOP_LEVEL_PARENT:
      if (value == null) {
        unsetIsTopLevelParent();
      } else {
        setIsTopLevelParent((java.lang.Boolean)value);
      }
      break;

    case BINARY_FILE:
      if (value == null) {
        unsetBinaryFile();
      } else {
        setBinaryFile((java.lang.String)value);
      }
      break;

    case TEXT_FILE:
      if (value == null) {
        unsetTextFile();
      } else {
        setTextFile((java.lang.String)value);
      }
      break;

    case CONTENT_CREATED:
      if (value == null) {
        unsetContentCreated();
      } else {
        setContentCreated((ScriptTZonedDateTime)value);
      }
      break;

    case CONTENT_LAST_MODIFIED:
      if (value == null) {
        unsetContentLastModified();
      } else {
        setContentLastModified((ScriptTZonedDateTime)value);
      }
      break;

    case CONTENT_LAST_ACCESSED:
      if (value == null) {
        unsetContentLastAccessed();
      } else {
        setContentLastAccessed((ScriptTZonedDateTime)value);
      }
      break;

    case FILE_CREATED:
      if (value == null) {
        unsetFileCreated();
      } else {
        setFileCreated((ScriptTZonedDateTime)value);
      }
      break;

    case FILE_LAST_MODIFIED:
      if (value == null) {
        unsetFileLastModified();
      } else {
        setFileLastModified((ScriptTZonedDateTime)value);
      }
      break;

    case FILE_LAST_ACCESSED:
      if (value == null) {
        unsetFileLastAccessed();
      } else {
        setFileLastAccessed((ScriptTZonedDateTime)value);
      }
      break;

    case LAST_PRINTED:
      if (value == null) {
        unsetLastPrinted();
      } else {
        setLastPrinted((ScriptTZonedDateTime)value);
      }
      break;

    case SENT:
      if (value == null) {
        unsetSent();
      } else {
        setSent((ScriptTZonedDateTime)value);
      }
      break;

    case RECEIVED:
      if (value == null) {
        unsetReceived();
      } else {
        setReceived((ScriptTZonedDateTime)value);
      }
      break;

    case VISITED:
      if (value == null) {
        unsetVisited();
      } else {
        setVisited((ScriptTZonedDateTime)value);
      }
      break;

    case CALLED:
      if (value == null) {
        unsetCalled();
      } else {
        setCalled((ScriptTZonedDateTime)value);
      }
      break;

    case STARTED:
      if (value == null) {
        unsetStarted();
      } else {
        setStarted((ScriptTZonedDateTime)value);
      }
      break;

    case ENDED:
      if (value == null) {
        unsetEnded();
      } else {
        setEnded((ScriptTZonedDateTime)value);
      }
      break;

    case DUE:
      if (value == null) {
        unsetDue();
      } else {
        setDue((ScriptTZonedDateTime)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((ScriptTZonedDateTime)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((java.lang.String)value);
      }
      break;

    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((java.lang.Integer)value);
      }
      break;

    case CREATORS:
      if (value == null) {
        unsetCreators();
      } else {
        setCreators((java.util.List<PersonAccount>)value);
      }
      break;

    case CONTRIBUTORS:
      if (value == null) {
        unsetContributors();
      } else {
        setContributors((java.util.List<PersonAccount>)value);
      }
      break;

    case ORGANIZATION:
      if (value == null) {
        unsetOrganization();
      } else {
        setOrganization((java.lang.String)value);
      }
      break;

    case EMPTY_DOCUMENT:
      if (value == null) {
        unsetEmptyDocument();
      } else {
        setEmptyDocument((java.lang.Boolean)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageID();
      } else {
        setMessageID((java.lang.String)value);
      }
      break;

    case MESSAGE_HEADERS:
      if (value == null) {
        unsetMessageHeaders();
      } else {
        setMessageHeaders((java.lang.String)value);
      }
      break;

    case CONVERSATION_INDEX_SET:
      if (value == null) {
        unsetConversationIndexSet();
      } else {
        setConversationIndexSet((java.util.Set<java.lang.String>)value);
      }
      break;

    case MESSAGE_FROM:
      if (value == null) {
        unsetMessageFrom();
      } else {
        setMessageFrom((java.util.Set<PersonAccount>)value);
      }
      break;

    case MESSAGE_SENDERS:
      if (value == null) {
        unsetMessageSenders();
      } else {
        setMessageSenders((java.util.Set<PersonAccount>)value);
      }
      break;

    case MESSAGE_TO:
      if (value == null) {
        unsetMessageTo();
      } else {
        setMessageTo((java.util.Set<PersonAccount>)value);
      }
      break;

    case MESSAGE_CC:
      if (value == null) {
        unsetMessageCc();
      } else {
        setMessageCc((java.util.Set<PersonAccount>)value);
      }
      break;

    case MESSAGE_BCC:
      if (value == null) {
        unsetMessageBcc();
      } else {
        setMessageBcc((java.util.Set<PersonAccount>)value);
      }
      break;

    case CHAT_SENDERS:
      if (value == null) {
        unsetChatSenders();
      } else {
        setChatSenders((java.util.Set<PersonAccount>)value);
      }
      break;

    case CHAT_RECEIVERS:
      if (value == null) {
        unsetChatReceivers();
      } else {
        setChatReceivers((java.util.Set<PersonAccount>)value);
      }
      break;

    case CHAT_ACCOUNTS:
      if (value == null) {
        unsetChatAccounts();
      } else {
        setChatAccounts((java.util.Set<PersonAccount>)value);
      }
      break;

    case IS_READ:
      if (value == null) {
        unsetIsRead();
      } else {
        setIsRead((java.lang.Boolean)value);
      }
      break;

    case DURATION_SECONDS:
      if (value == null) {
        unsetDurationSeconds();
      } else {
        setDurationSeconds((java.lang.Integer)value);
      }
      break;

    case INCOMING_PHONE_NUMBERS:
      if (value == null) {
        unsetIncomingPhoneNumbers();
      } else {
        setIncomingPhoneNumbers((java.util.Set<PersonAccount>)value);
      }
      break;

    case OUTGOING_PHONE_NUMBERS:
      if (value == null) {
        unsetOutgoingPhoneNumbers();
      } else {
        setOutgoingPhoneNumbers((java.util.Set<PersonAccount>)value);
      }
      break;

    case ALL_PHONE_NUMBERS:
      if (value == null) {
        unsetAllPhoneNumbers();
      } else {
        setAllPhoneNumbers((java.util.Set<PersonAccount>)value);
      }
      break;

    case SOURCE_IP:
      if (value == null) {
        unsetSourceIP();
      } else {
        setSourceIP((java.lang.String)value);
      }
      break;

    case MESSAGE_COUNT:
      if (value == null) {
        unsetMessageCount();
      } else {
        setMessageCount((java.lang.Integer)value);
      }
      break;

    case CHAT_PROTOCOL:
      if (value == null) {
        unsetChatProtocol();
      } else {
        setChatProtocol((java.util.Set<java.lang.String>)value);
      }
      break;

    case CHAT_CONVERSATION_ID:
      if (value == null) {
        unsetChatConversationId();
      } else {
        setChatConversationId((java.lang.String)value);
      }
      break;

    case INTELLA_CHAT_CONVERSATION_ID:
      if (value == null) {
        unsetIntellaChatConversationId();
      } else {
        setIntellaChatConversationId((java.lang.String)value);
      }
      break;

    case CHAT_CONVERSATION_TITLE:
      if (value == null) {
        unsetChatConversationTitle();
      } else {
        setChatConversationTitle((java.lang.String)value);
      }
      break;

    case VISITED_URL:
      if (value == null) {
        unsetVisitedUrl();
      } else {
        setVisitedUrl((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case FILE_NAME:
      return getFileName();

    case URI:
      return getUri();

    case MD5:
      return getMd5();

    case SIZE:
      return getSize();

    case MEDIA_TYPE:
      return getMediaType();

    case ENCRYPTED:
      return isEncrypted();

    case DECRYPTED:
      return isDecrypted();

    case PASSWORD:
      return getPassword();

    case CERTIFICATE:
      return getCertificate();

    case RAW_DATA:
      return getRawData();

    case CONTACT_NAME:
      return getContactName();

    case NATIVE_ID:
      return getNativeID();

    case DOCUMENT_ID:
      return getDocumentID();

    case PARENT_DOCUMENT_ID:
      return getParentDocumentID();

    case GEO_LOCATION:
      return getGeoLocation();

    case END_ATTACH:
      return getEndAttach();

    case TEXT_SNIPPET:
      return getTextSnippet();

    case RECOVERED:
      return isRecovered();

    case ORPHAN:
      return isOrphan();

    case EMBEDDED_IMAGE:
      return isEmbeddedImage();

    case FS_PATH:
      return getFsPath();

    case IS_TOP_LEVEL_PARENT:
      return isIsTopLevelParent();

    case BINARY_FILE:
      return getBinaryFile();

    case TEXT_FILE:
      return getTextFile();

    case CONTENT_CREATED:
      return getContentCreated();

    case CONTENT_LAST_MODIFIED:
      return getContentLastModified();

    case CONTENT_LAST_ACCESSED:
      return getContentLastAccessed();

    case FILE_CREATED:
      return getFileCreated();

    case FILE_LAST_MODIFIED:
      return getFileLastModified();

    case FILE_LAST_ACCESSED:
      return getFileLastAccessed();

    case LAST_PRINTED:
      return getLastPrinted();

    case SENT:
      return getSent();

    case RECEIVED:
      return getReceived();

    case VISITED:
      return getVisited();

    case CALLED:
      return getCalled();

    case STARTED:
      return getStarted();

    case ENDED:
      return getEnded();

    case DUE:
      return getDue();

    case DELETED:
      return getDeleted();

    case TITLE:
      return getTitle();

    case SUBJECT:
      return getSubject();

    case PAGE_COUNT:
      return getPageCount();

    case CREATORS:
      return getCreators();

    case CONTRIBUTORS:
      return getContributors();

    case ORGANIZATION:
      return getOrganization();

    case EMPTY_DOCUMENT:
      return isEmptyDocument();

    case MESSAGE_ID:
      return getMessageID();

    case MESSAGE_HEADERS:
      return getMessageHeaders();

    case CONVERSATION_INDEX_SET:
      return getConversationIndexSet();

    case MESSAGE_FROM:
      return getMessageFrom();

    case MESSAGE_SENDERS:
      return getMessageSenders();

    case MESSAGE_TO:
      return getMessageTo();

    case MESSAGE_CC:
      return getMessageCc();

    case MESSAGE_BCC:
      return getMessageBcc();

    case CHAT_SENDERS:
      return getChatSenders();

    case CHAT_RECEIVERS:
      return getChatReceivers();

    case CHAT_ACCOUNTS:
      return getChatAccounts();

    case IS_READ:
      return isIsRead();

    case DURATION_SECONDS:
      return getDurationSeconds();

    case INCOMING_PHONE_NUMBERS:
      return getIncomingPhoneNumbers();

    case OUTGOING_PHONE_NUMBERS:
      return getOutgoingPhoneNumbers();

    case ALL_PHONE_NUMBERS:
      return getAllPhoneNumbers();

    case SOURCE_IP:
      return getSourceIP();

    case MESSAGE_COUNT:
      return getMessageCount();

    case CHAT_PROTOCOL:
      return getChatProtocol();

    case CHAT_CONVERSATION_ID:
      return getChatConversationId();

    case INTELLA_CHAT_CONVERSATION_ID:
      return getIntellaChatConversationId();

    case CHAT_CONVERSATION_TITLE:
      return getChatConversationTitle();

    case VISITED_URL:
      return getVisitedUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FILE_NAME:
      return isSetFileName();
    case URI:
      return isSetUri();
    case MD5:
      return isSetMd5();
    case SIZE:
      return isSetSize();
    case MEDIA_TYPE:
      return isSetMediaType();
    case ENCRYPTED:
      return isSetEncrypted();
    case DECRYPTED:
      return isSetDecrypted();
    case PASSWORD:
      return isSetPassword();
    case CERTIFICATE:
      return isSetCertificate();
    case RAW_DATA:
      return isSetRawData();
    case CONTACT_NAME:
      return isSetContactName();
    case NATIVE_ID:
      return isSetNativeID();
    case DOCUMENT_ID:
      return isSetDocumentID();
    case PARENT_DOCUMENT_ID:
      return isSetParentDocumentID();
    case GEO_LOCATION:
      return isSetGeoLocation();
    case END_ATTACH:
      return isSetEndAttach();
    case TEXT_SNIPPET:
      return isSetTextSnippet();
    case RECOVERED:
      return isSetRecovered();
    case ORPHAN:
      return isSetOrphan();
    case EMBEDDED_IMAGE:
      return isSetEmbeddedImage();
    case FS_PATH:
      return isSetFsPath();
    case IS_TOP_LEVEL_PARENT:
      return isSetIsTopLevelParent();
    case BINARY_FILE:
      return isSetBinaryFile();
    case TEXT_FILE:
      return isSetTextFile();
    case CONTENT_CREATED:
      return isSetContentCreated();
    case CONTENT_LAST_MODIFIED:
      return isSetContentLastModified();
    case CONTENT_LAST_ACCESSED:
      return isSetContentLastAccessed();
    case FILE_CREATED:
      return isSetFileCreated();
    case FILE_LAST_MODIFIED:
      return isSetFileLastModified();
    case FILE_LAST_ACCESSED:
      return isSetFileLastAccessed();
    case LAST_PRINTED:
      return isSetLastPrinted();
    case SENT:
      return isSetSent();
    case RECEIVED:
      return isSetReceived();
    case VISITED:
      return isSetVisited();
    case CALLED:
      return isSetCalled();
    case STARTED:
      return isSetStarted();
    case ENDED:
      return isSetEnded();
    case DUE:
      return isSetDue();
    case DELETED:
      return isSetDeleted();
    case TITLE:
      return isSetTitle();
    case SUBJECT:
      return isSetSubject();
    case PAGE_COUNT:
      return isSetPageCount();
    case CREATORS:
      return isSetCreators();
    case CONTRIBUTORS:
      return isSetContributors();
    case ORGANIZATION:
      return isSetOrganization();
    case EMPTY_DOCUMENT:
      return isSetEmptyDocument();
    case MESSAGE_ID:
      return isSetMessageID();
    case MESSAGE_HEADERS:
      return isSetMessageHeaders();
    case CONVERSATION_INDEX_SET:
      return isSetConversationIndexSet();
    case MESSAGE_FROM:
      return isSetMessageFrom();
    case MESSAGE_SENDERS:
      return isSetMessageSenders();
    case MESSAGE_TO:
      return isSetMessageTo();
    case MESSAGE_CC:
      return isSetMessageCc();
    case MESSAGE_BCC:
      return isSetMessageBcc();
    case CHAT_SENDERS:
      return isSetChatSenders();
    case CHAT_RECEIVERS:
      return isSetChatReceivers();
    case CHAT_ACCOUNTS:
      return isSetChatAccounts();
    case IS_READ:
      return isSetIsRead();
    case DURATION_SECONDS:
      return isSetDurationSeconds();
    case INCOMING_PHONE_NUMBERS:
      return isSetIncomingPhoneNumbers();
    case OUTGOING_PHONE_NUMBERS:
      return isSetOutgoingPhoneNumbers();
    case ALL_PHONE_NUMBERS:
      return isSetAllPhoneNumbers();
    case SOURCE_IP:
      return isSetSourceIP();
    case MESSAGE_COUNT:
      return isSetMessageCount();
    case CHAT_PROTOCOL:
      return isSetChatProtocol();
    case CHAT_CONVERSATION_ID:
      return isSetChatConversationId();
    case INTELLA_CHAT_CONVERSATION_ID:
      return isSetIntellaChatConversationId();
    case CHAT_CONVERSATION_TITLE:
      return isSetChatConversationTitle();
    case VISITED_URL:
      return isSetVisitedUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ProcessedItem)
      return this.equals((ProcessedItem)that);
    return false;
  }

  public boolean equals(ProcessedItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_md5 = true && this.isSetMd5();
    boolean that_present_md5 = true && that.isSetMd5();
    if (this_present_md5 || that_present_md5) {
      if (!(this_present_md5 && that_present_md5))
        return false;
      if (!this.md5.equals(that.md5))
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_mediaType = true && this.isSetMediaType();
    boolean that_present_mediaType = true && that.isSetMediaType();
    if (this_present_mediaType || that_present_mediaType) {
      if (!(this_present_mediaType && that_present_mediaType))
        return false;
      if (!this.mediaType.equals(that.mediaType))
        return false;
    }

    boolean this_present_encrypted = true && this.isSetEncrypted();
    boolean that_present_encrypted = true && that.isSetEncrypted();
    if (this_present_encrypted || that_present_encrypted) {
      if (!(this_present_encrypted && that_present_encrypted))
        return false;
      if (this.encrypted != that.encrypted)
        return false;
    }

    boolean this_present_decrypted = true && this.isSetDecrypted();
    boolean that_present_decrypted = true && that.isSetDecrypted();
    if (this_present_decrypted || that_present_decrypted) {
      if (!(this_present_decrypted && that_present_decrypted))
        return false;
      if (this.decrypted != that.decrypted)
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_certificate = true && this.isSetCertificate();
    boolean that_present_certificate = true && that.isSetCertificate();
    if (this_present_certificate || that_present_certificate) {
      if (!(this_present_certificate && that_present_certificate))
        return false;
      if (!this.certificate.equals(that.certificate))
        return false;
    }

    boolean this_present_rawData = true && this.isSetRawData();
    boolean that_present_rawData = true && that.isSetRawData();
    if (this_present_rawData || that_present_rawData) {
      if (!(this_present_rawData && that_present_rawData))
        return false;
      if (!this.rawData.equals(that.rawData))
        return false;
    }

    boolean this_present_contactName = true && this.isSetContactName();
    boolean that_present_contactName = true && that.isSetContactName();
    if (this_present_contactName || that_present_contactName) {
      if (!(this_present_contactName && that_present_contactName))
        return false;
      if (!this.contactName.equals(that.contactName))
        return false;
    }

    boolean this_present_nativeID = true && this.isSetNativeID();
    boolean that_present_nativeID = true && that.isSetNativeID();
    if (this_present_nativeID || that_present_nativeID) {
      if (!(this_present_nativeID && that_present_nativeID))
        return false;
      if (!this.nativeID.equals(that.nativeID))
        return false;
    }

    boolean this_present_documentID = true && this.isSetDocumentID();
    boolean that_present_documentID = true && that.isSetDocumentID();
    if (this_present_documentID || that_present_documentID) {
      if (!(this_present_documentID && that_present_documentID))
        return false;
      if (!this.documentID.equals(that.documentID))
        return false;
    }

    boolean this_present_parentDocumentID = true && this.isSetParentDocumentID();
    boolean that_present_parentDocumentID = true && that.isSetParentDocumentID();
    if (this_present_parentDocumentID || that_present_parentDocumentID) {
      if (!(this_present_parentDocumentID && that_present_parentDocumentID))
        return false;
      if (!this.parentDocumentID.equals(that.parentDocumentID))
        return false;
    }

    boolean this_present_geoLocation = true && this.isSetGeoLocation();
    boolean that_present_geoLocation = true && that.isSetGeoLocation();
    if (this_present_geoLocation || that_present_geoLocation) {
      if (!(this_present_geoLocation && that_present_geoLocation))
        return false;
      if (!this.geoLocation.equals(that.geoLocation))
        return false;
    }

    boolean this_present_endAttach = true && this.isSetEndAttach();
    boolean that_present_endAttach = true && that.isSetEndAttach();
    if (this_present_endAttach || that_present_endAttach) {
      if (!(this_present_endAttach && that_present_endAttach))
        return false;
      if (!this.endAttach.equals(that.endAttach))
        return false;
    }

    boolean this_present_textSnippet = true && this.isSetTextSnippet();
    boolean that_present_textSnippet = true && that.isSetTextSnippet();
    if (this_present_textSnippet || that_present_textSnippet) {
      if (!(this_present_textSnippet && that_present_textSnippet))
        return false;
      if (!this.textSnippet.equals(that.textSnippet))
        return false;
    }

    boolean this_present_recovered = true && this.isSetRecovered();
    boolean that_present_recovered = true && that.isSetRecovered();
    if (this_present_recovered || that_present_recovered) {
      if (!(this_present_recovered && that_present_recovered))
        return false;
      if (this.recovered != that.recovered)
        return false;
    }

    boolean this_present_orphan = true && this.isSetOrphan();
    boolean that_present_orphan = true && that.isSetOrphan();
    if (this_present_orphan || that_present_orphan) {
      if (!(this_present_orphan && that_present_orphan))
        return false;
      if (this.orphan != that.orphan)
        return false;
    }

    boolean this_present_embeddedImage = true && this.isSetEmbeddedImage();
    boolean that_present_embeddedImage = true && that.isSetEmbeddedImage();
    if (this_present_embeddedImage || that_present_embeddedImage) {
      if (!(this_present_embeddedImage && that_present_embeddedImage))
        return false;
      if (this.embeddedImage != that.embeddedImage)
        return false;
    }

    boolean this_present_fsPath = true && this.isSetFsPath();
    boolean that_present_fsPath = true && that.isSetFsPath();
    if (this_present_fsPath || that_present_fsPath) {
      if (!(this_present_fsPath && that_present_fsPath))
        return false;
      if (!this.fsPath.equals(that.fsPath))
        return false;
    }

    boolean this_present_isTopLevelParent = true && this.isSetIsTopLevelParent();
    boolean that_present_isTopLevelParent = true && that.isSetIsTopLevelParent();
    if (this_present_isTopLevelParent || that_present_isTopLevelParent) {
      if (!(this_present_isTopLevelParent && that_present_isTopLevelParent))
        return false;
      if (this.isTopLevelParent != that.isTopLevelParent)
        return false;
    }

    boolean this_present_binaryFile = true && this.isSetBinaryFile();
    boolean that_present_binaryFile = true && that.isSetBinaryFile();
    if (this_present_binaryFile || that_present_binaryFile) {
      if (!(this_present_binaryFile && that_present_binaryFile))
        return false;
      if (!this.binaryFile.equals(that.binaryFile))
        return false;
    }

    boolean this_present_textFile = true && this.isSetTextFile();
    boolean that_present_textFile = true && that.isSetTextFile();
    if (this_present_textFile || that_present_textFile) {
      if (!(this_present_textFile && that_present_textFile))
        return false;
      if (!this.textFile.equals(that.textFile))
        return false;
    }

    boolean this_present_contentCreated = true && this.isSetContentCreated();
    boolean that_present_contentCreated = true && that.isSetContentCreated();
    if (this_present_contentCreated || that_present_contentCreated) {
      if (!(this_present_contentCreated && that_present_contentCreated))
        return false;
      if (!this.contentCreated.equals(that.contentCreated))
        return false;
    }

    boolean this_present_contentLastModified = true && this.isSetContentLastModified();
    boolean that_present_contentLastModified = true && that.isSetContentLastModified();
    if (this_present_contentLastModified || that_present_contentLastModified) {
      if (!(this_present_contentLastModified && that_present_contentLastModified))
        return false;
      if (!this.contentLastModified.equals(that.contentLastModified))
        return false;
    }

    boolean this_present_contentLastAccessed = true && this.isSetContentLastAccessed();
    boolean that_present_contentLastAccessed = true && that.isSetContentLastAccessed();
    if (this_present_contentLastAccessed || that_present_contentLastAccessed) {
      if (!(this_present_contentLastAccessed && that_present_contentLastAccessed))
        return false;
      if (!this.contentLastAccessed.equals(that.contentLastAccessed))
        return false;
    }

    boolean this_present_fileCreated = true && this.isSetFileCreated();
    boolean that_present_fileCreated = true && that.isSetFileCreated();
    if (this_present_fileCreated || that_present_fileCreated) {
      if (!(this_present_fileCreated && that_present_fileCreated))
        return false;
      if (!this.fileCreated.equals(that.fileCreated))
        return false;
    }

    boolean this_present_fileLastModified = true && this.isSetFileLastModified();
    boolean that_present_fileLastModified = true && that.isSetFileLastModified();
    if (this_present_fileLastModified || that_present_fileLastModified) {
      if (!(this_present_fileLastModified && that_present_fileLastModified))
        return false;
      if (!this.fileLastModified.equals(that.fileLastModified))
        return false;
    }

    boolean this_present_fileLastAccessed = true && this.isSetFileLastAccessed();
    boolean that_present_fileLastAccessed = true && that.isSetFileLastAccessed();
    if (this_present_fileLastAccessed || that_present_fileLastAccessed) {
      if (!(this_present_fileLastAccessed && that_present_fileLastAccessed))
        return false;
      if (!this.fileLastAccessed.equals(that.fileLastAccessed))
        return false;
    }

    boolean this_present_lastPrinted = true && this.isSetLastPrinted();
    boolean that_present_lastPrinted = true && that.isSetLastPrinted();
    if (this_present_lastPrinted || that_present_lastPrinted) {
      if (!(this_present_lastPrinted && that_present_lastPrinted))
        return false;
      if (!this.lastPrinted.equals(that.lastPrinted))
        return false;
    }

    boolean this_present_sent = true && this.isSetSent();
    boolean that_present_sent = true && that.isSetSent();
    if (this_present_sent || that_present_sent) {
      if (!(this_present_sent && that_present_sent))
        return false;
      if (!this.sent.equals(that.sent))
        return false;
    }

    boolean this_present_received = true && this.isSetReceived();
    boolean that_present_received = true && that.isSetReceived();
    if (this_present_received || that_present_received) {
      if (!(this_present_received && that_present_received))
        return false;
      if (!this.received.equals(that.received))
        return false;
    }

    boolean this_present_visited = true && this.isSetVisited();
    boolean that_present_visited = true && that.isSetVisited();
    if (this_present_visited || that_present_visited) {
      if (!(this_present_visited && that_present_visited))
        return false;
      if (!this.visited.equals(that.visited))
        return false;
    }

    boolean this_present_called = true && this.isSetCalled();
    boolean that_present_called = true && that.isSetCalled();
    if (this_present_called || that_present_called) {
      if (!(this_present_called && that_present_called))
        return false;
      if (!this.called.equals(that.called))
        return false;
    }

    boolean this_present_started = true && this.isSetStarted();
    boolean that_present_started = true && that.isSetStarted();
    if (this_present_started || that_present_started) {
      if (!(this_present_started && that_present_started))
        return false;
      if (!this.started.equals(that.started))
        return false;
    }

    boolean this_present_ended = true && this.isSetEnded();
    boolean that_present_ended = true && that.isSetEnded();
    if (this_present_ended || that_present_ended) {
      if (!(this_present_ended && that_present_ended))
        return false;
      if (!this.ended.equals(that.ended))
        return false;
    }

    boolean this_present_due = true && this.isSetDue();
    boolean that_present_due = true && that.isSetDue();
    if (this_present_due || that_present_due) {
      if (!(this_present_due && that_present_due))
        return false;
      if (!this.due.equals(that.due))
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (!this.deleted.equals(that.deleted))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_pageCount = true && this.isSetPageCount();
    boolean that_present_pageCount = true && that.isSetPageCount();
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }

    boolean this_present_creators = true && this.isSetCreators();
    boolean that_present_creators = true && that.isSetCreators();
    if (this_present_creators || that_present_creators) {
      if (!(this_present_creators && that_present_creators))
        return false;
      if (!this.creators.equals(that.creators))
        return false;
    }

    boolean this_present_contributors = true && this.isSetContributors();
    boolean that_present_contributors = true && that.isSetContributors();
    if (this_present_contributors || that_present_contributors) {
      if (!(this_present_contributors && that_present_contributors))
        return false;
      if (!this.contributors.equals(that.contributors))
        return false;
    }

    boolean this_present_organization = true && this.isSetOrganization();
    boolean that_present_organization = true && that.isSetOrganization();
    if (this_present_organization || that_present_organization) {
      if (!(this_present_organization && that_present_organization))
        return false;
      if (!this.organization.equals(that.organization))
        return false;
    }

    boolean this_present_emptyDocument = true && this.isSetEmptyDocument();
    boolean that_present_emptyDocument = true && that.isSetEmptyDocument();
    if (this_present_emptyDocument || that_present_emptyDocument) {
      if (!(this_present_emptyDocument && that_present_emptyDocument))
        return false;
      if (this.emptyDocument != that.emptyDocument)
        return false;
    }

    boolean this_present_messageID = true && this.isSetMessageID();
    boolean that_present_messageID = true && that.isSetMessageID();
    if (this_present_messageID || that_present_messageID) {
      if (!(this_present_messageID && that_present_messageID))
        return false;
      if (!this.messageID.equals(that.messageID))
        return false;
    }

    boolean this_present_messageHeaders = true && this.isSetMessageHeaders();
    boolean that_present_messageHeaders = true && that.isSetMessageHeaders();
    if (this_present_messageHeaders || that_present_messageHeaders) {
      if (!(this_present_messageHeaders && that_present_messageHeaders))
        return false;
      if (!this.messageHeaders.equals(that.messageHeaders))
        return false;
    }

    boolean this_present_conversationIndexSet = true && this.isSetConversationIndexSet();
    boolean that_present_conversationIndexSet = true && that.isSetConversationIndexSet();
    if (this_present_conversationIndexSet || that_present_conversationIndexSet) {
      if (!(this_present_conversationIndexSet && that_present_conversationIndexSet))
        return false;
      if (!this.conversationIndexSet.equals(that.conversationIndexSet))
        return false;
    }

    boolean this_present_messageFrom = true && this.isSetMessageFrom();
    boolean that_present_messageFrom = true && that.isSetMessageFrom();
    if (this_present_messageFrom || that_present_messageFrom) {
      if (!(this_present_messageFrom && that_present_messageFrom))
        return false;
      if (!this.messageFrom.equals(that.messageFrom))
        return false;
    }

    boolean this_present_messageSenders = true && this.isSetMessageSenders();
    boolean that_present_messageSenders = true && that.isSetMessageSenders();
    if (this_present_messageSenders || that_present_messageSenders) {
      if (!(this_present_messageSenders && that_present_messageSenders))
        return false;
      if (!this.messageSenders.equals(that.messageSenders))
        return false;
    }

    boolean this_present_messageTo = true && this.isSetMessageTo();
    boolean that_present_messageTo = true && that.isSetMessageTo();
    if (this_present_messageTo || that_present_messageTo) {
      if (!(this_present_messageTo && that_present_messageTo))
        return false;
      if (!this.messageTo.equals(that.messageTo))
        return false;
    }

    boolean this_present_messageCc = true && this.isSetMessageCc();
    boolean that_present_messageCc = true && that.isSetMessageCc();
    if (this_present_messageCc || that_present_messageCc) {
      if (!(this_present_messageCc && that_present_messageCc))
        return false;
      if (!this.messageCc.equals(that.messageCc))
        return false;
    }

    boolean this_present_messageBcc = true && this.isSetMessageBcc();
    boolean that_present_messageBcc = true && that.isSetMessageBcc();
    if (this_present_messageBcc || that_present_messageBcc) {
      if (!(this_present_messageBcc && that_present_messageBcc))
        return false;
      if (!this.messageBcc.equals(that.messageBcc))
        return false;
    }

    boolean this_present_chatSenders = true && this.isSetChatSenders();
    boolean that_present_chatSenders = true && that.isSetChatSenders();
    if (this_present_chatSenders || that_present_chatSenders) {
      if (!(this_present_chatSenders && that_present_chatSenders))
        return false;
      if (!this.chatSenders.equals(that.chatSenders))
        return false;
    }

    boolean this_present_chatReceivers = true && this.isSetChatReceivers();
    boolean that_present_chatReceivers = true && that.isSetChatReceivers();
    if (this_present_chatReceivers || that_present_chatReceivers) {
      if (!(this_present_chatReceivers && that_present_chatReceivers))
        return false;
      if (!this.chatReceivers.equals(that.chatReceivers))
        return false;
    }

    boolean this_present_chatAccounts = true && this.isSetChatAccounts();
    boolean that_present_chatAccounts = true && that.isSetChatAccounts();
    if (this_present_chatAccounts || that_present_chatAccounts) {
      if (!(this_present_chatAccounts && that_present_chatAccounts))
        return false;
      if (!this.chatAccounts.equals(that.chatAccounts))
        return false;
    }

    boolean this_present_isRead = true && this.isSetIsRead();
    boolean that_present_isRead = true && that.isSetIsRead();
    if (this_present_isRead || that_present_isRead) {
      if (!(this_present_isRead && that_present_isRead))
        return false;
      if (this.isRead != that.isRead)
        return false;
    }

    boolean this_present_durationSeconds = true && this.isSetDurationSeconds();
    boolean that_present_durationSeconds = true && that.isSetDurationSeconds();
    if (this_present_durationSeconds || that_present_durationSeconds) {
      if (!(this_present_durationSeconds && that_present_durationSeconds))
        return false;
      if (this.durationSeconds != that.durationSeconds)
        return false;
    }

    boolean this_present_incomingPhoneNumbers = true && this.isSetIncomingPhoneNumbers();
    boolean that_present_incomingPhoneNumbers = true && that.isSetIncomingPhoneNumbers();
    if (this_present_incomingPhoneNumbers || that_present_incomingPhoneNumbers) {
      if (!(this_present_incomingPhoneNumbers && that_present_incomingPhoneNumbers))
        return false;
      if (!this.incomingPhoneNumbers.equals(that.incomingPhoneNumbers))
        return false;
    }

    boolean this_present_outgoingPhoneNumbers = true && this.isSetOutgoingPhoneNumbers();
    boolean that_present_outgoingPhoneNumbers = true && that.isSetOutgoingPhoneNumbers();
    if (this_present_outgoingPhoneNumbers || that_present_outgoingPhoneNumbers) {
      if (!(this_present_outgoingPhoneNumbers && that_present_outgoingPhoneNumbers))
        return false;
      if (!this.outgoingPhoneNumbers.equals(that.outgoingPhoneNumbers))
        return false;
    }

    boolean this_present_allPhoneNumbers = true && this.isSetAllPhoneNumbers();
    boolean that_present_allPhoneNumbers = true && that.isSetAllPhoneNumbers();
    if (this_present_allPhoneNumbers || that_present_allPhoneNumbers) {
      if (!(this_present_allPhoneNumbers && that_present_allPhoneNumbers))
        return false;
      if (!this.allPhoneNumbers.equals(that.allPhoneNumbers))
        return false;
    }

    boolean this_present_sourceIP = true && this.isSetSourceIP();
    boolean that_present_sourceIP = true && that.isSetSourceIP();
    if (this_present_sourceIP || that_present_sourceIP) {
      if (!(this_present_sourceIP && that_present_sourceIP))
        return false;
      if (!this.sourceIP.equals(that.sourceIP))
        return false;
    }

    boolean this_present_messageCount = true && this.isSetMessageCount();
    boolean that_present_messageCount = true && that.isSetMessageCount();
    if (this_present_messageCount || that_present_messageCount) {
      if (!(this_present_messageCount && that_present_messageCount))
        return false;
      if (this.messageCount != that.messageCount)
        return false;
    }

    boolean this_present_chatProtocol = true && this.isSetChatProtocol();
    boolean that_present_chatProtocol = true && that.isSetChatProtocol();
    if (this_present_chatProtocol || that_present_chatProtocol) {
      if (!(this_present_chatProtocol && that_present_chatProtocol))
        return false;
      if (!this.chatProtocol.equals(that.chatProtocol))
        return false;
    }

    boolean this_present_chatConversationId = true && this.isSetChatConversationId();
    boolean that_present_chatConversationId = true && that.isSetChatConversationId();
    if (this_present_chatConversationId || that_present_chatConversationId) {
      if (!(this_present_chatConversationId && that_present_chatConversationId))
        return false;
      if (!this.chatConversationId.equals(that.chatConversationId))
        return false;
    }

    boolean this_present_intellaChatConversationId = true && this.isSetIntellaChatConversationId();
    boolean that_present_intellaChatConversationId = true && that.isSetIntellaChatConversationId();
    if (this_present_intellaChatConversationId || that_present_intellaChatConversationId) {
      if (!(this_present_intellaChatConversationId && that_present_intellaChatConversationId))
        return false;
      if (!this.intellaChatConversationId.equals(that.intellaChatConversationId))
        return false;
    }

    boolean this_present_chatConversationTitle = true && this.isSetChatConversationTitle();
    boolean that_present_chatConversationTitle = true && that.isSetChatConversationTitle();
    if (this_present_chatConversationTitle || that_present_chatConversationTitle) {
      if (!(this_present_chatConversationTitle && that_present_chatConversationTitle))
        return false;
      if (!this.chatConversationTitle.equals(that.chatConversationTitle))
        return false;
    }

    boolean this_present_visitedUrl = true && this.isSetVisitedUrl();
    boolean that_present_visitedUrl = true && that.isSetVisitedUrl();
    if (this_present_visitedUrl || that_present_visitedUrl) {
      if (!(this_present_visitedUrl && that_present_visitedUrl))
        return false;
      if (!this.visitedUrl.equals(that.visitedUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
    if (isSetFileName())
      hashCode = hashCode * 8191 + fileName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + ((isSetMd5()) ? 131071 : 524287);
    if (isSetMd5())
      hashCode = hashCode * 8191 + md5.hashCode();

    hashCode = hashCode * 8191 + ((isSetSize()) ? 131071 : 524287);
    if (isSetSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(size);

    hashCode = hashCode * 8191 + ((isSetMediaType()) ? 131071 : 524287);
    if (isSetMediaType())
      hashCode = hashCode * 8191 + mediaType.hashCode();

    hashCode = hashCode * 8191 + ((isSetEncrypted()) ? 131071 : 524287);
    if (isSetEncrypted())
      hashCode = hashCode * 8191 + ((encrypted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDecrypted()) ? 131071 : 524287);
    if (isSetDecrypted())
      hashCode = hashCode * 8191 + ((decrypted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetCertificate()) ? 131071 : 524287);
    if (isSetCertificate())
      hashCode = hashCode * 8191 + certificate.hashCode();

    hashCode = hashCode * 8191 + ((isSetRawData()) ? 131071 : 524287);
    if (isSetRawData())
      hashCode = hashCode * 8191 + rawData.hashCode();

    hashCode = hashCode * 8191 + ((isSetContactName()) ? 131071 : 524287);
    if (isSetContactName())
      hashCode = hashCode * 8191 + contactName.hashCode();

    hashCode = hashCode * 8191 + ((isSetNativeID()) ? 131071 : 524287);
    if (isSetNativeID())
      hashCode = hashCode * 8191 + nativeID.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocumentID()) ? 131071 : 524287);
    if (isSetDocumentID())
      hashCode = hashCode * 8191 + documentID.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentDocumentID()) ? 131071 : 524287);
    if (isSetParentDocumentID())
      hashCode = hashCode * 8191 + parentDocumentID.hashCode();

    hashCode = hashCode * 8191 + ((isSetGeoLocation()) ? 131071 : 524287);
    if (isSetGeoLocation())
      hashCode = hashCode * 8191 + geoLocation.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndAttach()) ? 131071 : 524287);
    if (isSetEndAttach())
      hashCode = hashCode * 8191 + endAttach.hashCode();

    hashCode = hashCode * 8191 + ((isSetTextSnippet()) ? 131071 : 524287);
    if (isSetTextSnippet())
      hashCode = hashCode * 8191 + textSnippet.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecovered()) ? 131071 : 524287);
    if (isSetRecovered())
      hashCode = hashCode * 8191 + ((recovered) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOrphan()) ? 131071 : 524287);
    if (isSetOrphan())
      hashCode = hashCode * 8191 + ((orphan) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEmbeddedImage()) ? 131071 : 524287);
    if (isSetEmbeddedImage())
      hashCode = hashCode * 8191 + ((embeddedImage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFsPath()) ? 131071 : 524287);
    if (isSetFsPath())
      hashCode = hashCode * 8191 + fsPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsTopLevelParent()) ? 131071 : 524287);
    if (isSetIsTopLevelParent())
      hashCode = hashCode * 8191 + ((isTopLevelParent) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBinaryFile()) ? 131071 : 524287);
    if (isSetBinaryFile())
      hashCode = hashCode * 8191 + binaryFile.hashCode();

    hashCode = hashCode * 8191 + ((isSetTextFile()) ? 131071 : 524287);
    if (isSetTextFile())
      hashCode = hashCode * 8191 + textFile.hashCode();

    hashCode = hashCode * 8191 + ((isSetContentCreated()) ? 131071 : 524287);
    if (isSetContentCreated())
      hashCode = hashCode * 8191 + contentCreated.hashCode();

    hashCode = hashCode * 8191 + ((isSetContentLastModified()) ? 131071 : 524287);
    if (isSetContentLastModified())
      hashCode = hashCode * 8191 + contentLastModified.hashCode();

    hashCode = hashCode * 8191 + ((isSetContentLastAccessed()) ? 131071 : 524287);
    if (isSetContentLastAccessed())
      hashCode = hashCode * 8191 + contentLastAccessed.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileCreated()) ? 131071 : 524287);
    if (isSetFileCreated())
      hashCode = hashCode * 8191 + fileCreated.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileLastModified()) ? 131071 : 524287);
    if (isSetFileLastModified())
      hashCode = hashCode * 8191 + fileLastModified.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileLastAccessed()) ? 131071 : 524287);
    if (isSetFileLastAccessed())
      hashCode = hashCode * 8191 + fileLastAccessed.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastPrinted()) ? 131071 : 524287);
    if (isSetLastPrinted())
      hashCode = hashCode * 8191 + lastPrinted.hashCode();

    hashCode = hashCode * 8191 + ((isSetSent()) ? 131071 : 524287);
    if (isSetSent())
      hashCode = hashCode * 8191 + sent.hashCode();

    hashCode = hashCode * 8191 + ((isSetReceived()) ? 131071 : 524287);
    if (isSetReceived())
      hashCode = hashCode * 8191 + received.hashCode();

    hashCode = hashCode * 8191 + ((isSetVisited()) ? 131071 : 524287);
    if (isSetVisited())
      hashCode = hashCode * 8191 + visited.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalled()) ? 131071 : 524287);
    if (isSetCalled())
      hashCode = hashCode * 8191 + called.hashCode();

    hashCode = hashCode * 8191 + ((isSetStarted()) ? 131071 : 524287);
    if (isSetStarted())
      hashCode = hashCode * 8191 + started.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnded()) ? 131071 : 524287);
    if (isSetEnded())
      hashCode = hashCode * 8191 + ended.hashCode();

    hashCode = hashCode * 8191 + ((isSetDue()) ? 131071 : 524287);
    if (isSetDue())
      hashCode = hashCode * 8191 + due.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleted()) ? 131071 : 524287);
    if (isSetDeleted())
      hashCode = hashCode * 8191 + deleted.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubject()) ? 131071 : 524287);
    if (isSetSubject())
      hashCode = hashCode * 8191 + subject.hashCode();

    hashCode = hashCode * 8191 + ((isSetPageCount()) ? 131071 : 524287);
    if (isSetPageCount())
      hashCode = hashCode * 8191 + pageCount;

    hashCode = hashCode * 8191 + ((isSetCreators()) ? 131071 : 524287);
    if (isSetCreators())
      hashCode = hashCode * 8191 + creators.hashCode();

    hashCode = hashCode * 8191 + ((isSetContributors()) ? 131071 : 524287);
    if (isSetContributors())
      hashCode = hashCode * 8191 + contributors.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrganization()) ? 131071 : 524287);
    if (isSetOrganization())
      hashCode = hashCode * 8191 + organization.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmptyDocument()) ? 131071 : 524287);
    if (isSetEmptyDocument())
      hashCode = hashCode * 8191 + ((emptyDocument) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMessageID()) ? 131071 : 524287);
    if (isSetMessageID())
      hashCode = hashCode * 8191 + messageID.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageHeaders()) ? 131071 : 524287);
    if (isSetMessageHeaders())
      hashCode = hashCode * 8191 + messageHeaders.hashCode();

    hashCode = hashCode * 8191 + ((isSetConversationIndexSet()) ? 131071 : 524287);
    if (isSetConversationIndexSet())
      hashCode = hashCode * 8191 + conversationIndexSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageFrom()) ? 131071 : 524287);
    if (isSetMessageFrom())
      hashCode = hashCode * 8191 + messageFrom.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageSenders()) ? 131071 : 524287);
    if (isSetMessageSenders())
      hashCode = hashCode * 8191 + messageSenders.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageTo()) ? 131071 : 524287);
    if (isSetMessageTo())
      hashCode = hashCode * 8191 + messageTo.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageCc()) ? 131071 : 524287);
    if (isSetMessageCc())
      hashCode = hashCode * 8191 + messageCc.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageBcc()) ? 131071 : 524287);
    if (isSetMessageBcc())
      hashCode = hashCode * 8191 + messageBcc.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatSenders()) ? 131071 : 524287);
    if (isSetChatSenders())
      hashCode = hashCode * 8191 + chatSenders.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatReceivers()) ? 131071 : 524287);
    if (isSetChatReceivers())
      hashCode = hashCode * 8191 + chatReceivers.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatAccounts()) ? 131071 : 524287);
    if (isSetChatAccounts())
      hashCode = hashCode * 8191 + chatAccounts.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsRead()) ? 131071 : 524287);
    if (isSetIsRead())
      hashCode = hashCode * 8191 + ((isRead) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDurationSeconds()) ? 131071 : 524287);
    if (isSetDurationSeconds())
      hashCode = hashCode * 8191 + durationSeconds;

    hashCode = hashCode * 8191 + ((isSetIncomingPhoneNumbers()) ? 131071 : 524287);
    if (isSetIncomingPhoneNumbers())
      hashCode = hashCode * 8191 + incomingPhoneNumbers.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutgoingPhoneNumbers()) ? 131071 : 524287);
    if (isSetOutgoingPhoneNumbers())
      hashCode = hashCode * 8191 + outgoingPhoneNumbers.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllPhoneNumbers()) ? 131071 : 524287);
    if (isSetAllPhoneNumbers())
      hashCode = hashCode * 8191 + allPhoneNumbers.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceIP()) ? 131071 : 524287);
    if (isSetSourceIP())
      hashCode = hashCode * 8191 + sourceIP.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageCount()) ? 131071 : 524287);
    if (isSetMessageCount())
      hashCode = hashCode * 8191 + messageCount;

    hashCode = hashCode * 8191 + ((isSetChatProtocol()) ? 131071 : 524287);
    if (isSetChatProtocol())
      hashCode = hashCode * 8191 + chatProtocol.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatConversationId()) ? 131071 : 524287);
    if (isSetChatConversationId())
      hashCode = hashCode * 8191 + chatConversationId.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntellaChatConversationId()) ? 131071 : 524287);
    if (isSetIntellaChatConversationId())
      hashCode = hashCode * 8191 + intellaChatConversationId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatConversationTitle()) ? 131071 : 524287);
    if (isSetChatConversationTitle())
      hashCode = hashCode * 8191 + chatConversationTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetVisitedUrl()) ? 131071 : 524287);
    if (isSetVisitedUrl())
      hashCode = hashCode * 8191 + visitedUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProcessedItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileName(), other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUri(), other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMd5(), other.isSetMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSize(), other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMediaType(), other.isSetMediaType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, other.mediaType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEncrypted(), other.isSetEncrypted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncrypted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encrypted, other.encrypted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDecrypted(), other.isSetDecrypted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecrypted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decrypted, other.decrypted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCertificate(), other.isSetCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificate, other.certificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRawData(), other.isSetRawData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawData, other.rawData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContactName(), other.isSetContactName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactName, other.contactName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNativeID(), other.isSetNativeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNativeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nativeID, other.nativeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDocumentID(), other.isSetDocumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentID, other.documentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParentDocumentID(), other.isSetParentDocumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentDocumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentDocumentID, other.parentDocumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeoLocation(), other.isSetGeoLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoLocation, other.geoLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEndAttach(), other.isSetEndAttach());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndAttach()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endAttach, other.endAttach);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTextSnippet(), other.isSetTextSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textSnippet, other.textSnippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecovered(), other.isSetRecovered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecovered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recovered, other.recovered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOrphan(), other.isSetOrphan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrphan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orphan, other.orphan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEmbeddedImage(), other.isSetEmbeddedImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmbeddedImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.embeddedImage, other.embeddedImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFsPath(), other.isSetFsPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsPath, other.fsPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTopLevelParent(), other.isSetIsTopLevelParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTopLevelParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTopLevelParent, other.isTopLevelParent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinaryFile(), other.isSetBinaryFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryFile, other.binaryFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTextFile(), other.isSetTextFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textFile, other.textFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContentCreated(), other.isSetContentCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentCreated, other.contentCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContentLastModified(), other.isSetContentLastModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentLastModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentLastModified, other.contentLastModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContentLastAccessed(), other.isSetContentLastAccessed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentLastAccessed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentLastAccessed, other.contentLastAccessed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileCreated(), other.isSetFileCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileCreated, other.fileCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileLastModified(), other.isSetFileLastModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileLastModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLastModified, other.fileLastModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileLastAccessed(), other.isSetFileLastAccessed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileLastAccessed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLastAccessed, other.fileLastAccessed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLastPrinted(), other.isSetLastPrinted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrinted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrinted, other.lastPrinted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSent(), other.isSetSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sent, other.sent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReceived(), other.isSetReceived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.received, other.received);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisited(), other.isSetVisited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visited, other.visited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCalled(), other.isSetCalled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.called, other.called);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStarted(), other.isSetStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.started, other.started);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnded(), other.isSetEnded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ended, other.ended);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDue(), other.isSetDue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.due, other.due);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeleted(), other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTitle(), other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSubject(), other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPageCount(), other.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, other.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreators(), other.isSetCreators());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreators()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creators, other.creators);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContributors(), other.isSetContributors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContributors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contributors, other.contributors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOrganization(), other.isSetOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organization, other.organization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEmptyDocument(), other.isSetEmptyDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmptyDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyDocument, other.emptyDocument);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageID(), other.isSetMessageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageID, other.messageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageHeaders(), other.isSetMessageHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageHeaders, other.messageHeaders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConversationIndexSet(), other.isSetConversationIndexSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConversationIndexSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conversationIndexSet, other.conversationIndexSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageFrom(), other.isSetMessageFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageFrom, other.messageFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageSenders(), other.isSetMessageSenders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageSenders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageSenders, other.messageSenders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageTo(), other.isSetMessageTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageTo, other.messageTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageCc(), other.isSetMessageCc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageCc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageCc, other.messageCc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageBcc(), other.isSetMessageBcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageBcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageBcc, other.messageBcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChatSenders(), other.isSetChatSenders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatSenders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatSenders, other.chatSenders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChatReceivers(), other.isSetChatReceivers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatReceivers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatReceivers, other.chatReceivers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChatAccounts(), other.isSetChatAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatAccounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatAccounts, other.chatAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsRead(), other.isSetIsRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRead, other.isRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDurationSeconds(), other.isSetDurationSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationSeconds, other.durationSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIncomingPhoneNumbers(), other.isSetIncomingPhoneNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomingPhoneNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingPhoneNumbers, other.incomingPhoneNumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutgoingPhoneNumbers(), other.isSetOutgoingPhoneNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutgoingPhoneNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outgoingPhoneNumbers, other.outgoingPhoneNumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllPhoneNumbers(), other.isSetAllPhoneNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllPhoneNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allPhoneNumbers, other.allPhoneNumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSourceIP(), other.isSetSourceIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceIP, other.sourceIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageCount(), other.isSetMessageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageCount, other.messageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChatProtocol(), other.isSetChatProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatProtocol, other.chatProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChatConversationId(), other.isSetChatConversationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatConversationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatConversationId, other.chatConversationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntellaChatConversationId(), other.isSetIntellaChatConversationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntellaChatConversationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intellaChatConversationId, other.intellaChatConversationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChatConversationTitle(), other.isSetChatConversationTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatConversationTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatConversationTitle, other.chatConversationTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisitedUrl(), other.isSetVisitedUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitedUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitedUrl, other.visitedUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProcessedItem(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetFileName()) {
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
    }
    if (isSetUri()) {
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
    }
    if (isSetMd5()) {
      if (!first) sb.append(", ");
      sb.append("md5:");
      if (this.md5 == null) {
        sb.append("null");
      } else {
        sb.append(this.md5);
      }
      first = false;
    }
    if (isSetSize()) {
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
    }
    if (isSetMediaType()) {
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
    }
    if (isSetEncrypted()) {
      if (!first) sb.append(", ");
      sb.append("encrypted:");
      sb.append(this.encrypted);
      first = false;
    }
    if (isSetDecrypted()) {
      if (!first) sb.append(", ");
      sb.append("decrypted:");
      sb.append(this.decrypted);
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetCertificate()) {
      if (!first) sb.append(", ");
      sb.append("certificate:");
      if (this.certificate == null) {
        sb.append("null");
      } else {
        sb.append(this.certificate);
      }
      first = false;
    }
    if (isSetRawData()) {
      if (!first) sb.append(", ");
      sb.append("rawData:");
      if (this.rawData == null) {
        sb.append("null");
      } else {
        sb.append(this.rawData);
      }
      first = false;
    }
    if (isSetContactName()) {
      if (!first) sb.append(", ");
      sb.append("contactName:");
      if (this.contactName == null) {
        sb.append("null");
      } else {
        sb.append(this.contactName);
      }
      first = false;
    }
    if (isSetNativeID()) {
      if (!first) sb.append(", ");
      sb.append("nativeID:");
      if (this.nativeID == null) {
        sb.append("null");
      } else {
        sb.append(this.nativeID);
      }
      first = false;
    }
    if (isSetDocumentID()) {
      if (!first) sb.append(", ");
      sb.append("documentID:");
      if (this.documentID == null) {
        sb.append("null");
      } else {
        sb.append(this.documentID);
      }
      first = false;
    }
    if (isSetParentDocumentID()) {
      if (!first) sb.append(", ");
      sb.append("parentDocumentID:");
      if (this.parentDocumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.parentDocumentID);
      }
      first = false;
    }
    if (isSetGeoLocation()) {
      if (!first) sb.append(", ");
      sb.append("geoLocation:");
      if (this.geoLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.geoLocation);
      }
      first = false;
    }
    if (isSetEndAttach()) {
      if (!first) sb.append(", ");
      sb.append("endAttach:");
      if (this.endAttach == null) {
        sb.append("null");
      } else {
        sb.append(this.endAttach);
      }
      first = false;
    }
    if (isSetTextSnippet()) {
      if (!first) sb.append(", ");
      sb.append("textSnippet:");
      if (this.textSnippet == null) {
        sb.append("null");
      } else {
        sb.append(this.textSnippet);
      }
      first = false;
    }
    if (isSetRecovered()) {
      if (!first) sb.append(", ");
      sb.append("recovered:");
      sb.append(this.recovered);
      first = false;
    }
    if (isSetOrphan()) {
      if (!first) sb.append(", ");
      sb.append("orphan:");
      sb.append(this.orphan);
      first = false;
    }
    if (isSetEmbeddedImage()) {
      if (!first) sb.append(", ");
      sb.append("embeddedImage:");
      sb.append(this.embeddedImage);
      first = false;
    }
    if (isSetFsPath()) {
      if (!first) sb.append(", ");
      sb.append("fsPath:");
      if (this.fsPath == null) {
        sb.append("null");
      } else {
        sb.append(this.fsPath);
      }
      first = false;
    }
    if (isSetIsTopLevelParent()) {
      if (!first) sb.append(", ");
      sb.append("isTopLevelParent:");
      sb.append(this.isTopLevelParent);
      first = false;
    }
    if (isSetBinaryFile()) {
      if (!first) sb.append(", ");
      sb.append("binaryFile:");
      if (this.binaryFile == null) {
        sb.append("null");
      } else {
        sb.append(this.binaryFile);
      }
      first = false;
    }
    if (isSetTextFile()) {
      if (!first) sb.append(", ");
      sb.append("textFile:");
      if (this.textFile == null) {
        sb.append("null");
      } else {
        sb.append(this.textFile);
      }
      first = false;
    }
    if (isSetContentCreated()) {
      if (!first) sb.append(", ");
      sb.append("contentCreated:");
      if (this.contentCreated == null) {
        sb.append("null");
      } else {
        sb.append(this.contentCreated);
      }
      first = false;
    }
    if (isSetContentLastModified()) {
      if (!first) sb.append(", ");
      sb.append("contentLastModified:");
      if (this.contentLastModified == null) {
        sb.append("null");
      } else {
        sb.append(this.contentLastModified);
      }
      first = false;
    }
    if (isSetContentLastAccessed()) {
      if (!first) sb.append(", ");
      sb.append("contentLastAccessed:");
      if (this.contentLastAccessed == null) {
        sb.append("null");
      } else {
        sb.append(this.contentLastAccessed);
      }
      first = false;
    }
    if (isSetFileCreated()) {
      if (!first) sb.append(", ");
      sb.append("fileCreated:");
      if (this.fileCreated == null) {
        sb.append("null");
      } else {
        sb.append(this.fileCreated);
      }
      first = false;
    }
    if (isSetFileLastModified()) {
      if (!first) sb.append(", ");
      sb.append("fileLastModified:");
      if (this.fileLastModified == null) {
        sb.append("null");
      } else {
        sb.append(this.fileLastModified);
      }
      first = false;
    }
    if (isSetFileLastAccessed()) {
      if (!first) sb.append(", ");
      sb.append("fileLastAccessed:");
      if (this.fileLastAccessed == null) {
        sb.append("null");
      } else {
        sb.append(this.fileLastAccessed);
      }
      first = false;
    }
    if (isSetLastPrinted()) {
      if (!first) sb.append(", ");
      sb.append("lastPrinted:");
      if (this.lastPrinted == null) {
        sb.append("null");
      } else {
        sb.append(this.lastPrinted);
      }
      first = false;
    }
    if (isSetSent()) {
      if (!first) sb.append(", ");
      sb.append("sent:");
      if (this.sent == null) {
        sb.append("null");
      } else {
        sb.append(this.sent);
      }
      first = false;
    }
    if (isSetReceived()) {
      if (!first) sb.append(", ");
      sb.append("received:");
      if (this.received == null) {
        sb.append("null");
      } else {
        sb.append(this.received);
      }
      first = false;
    }
    if (isSetVisited()) {
      if (!first) sb.append(", ");
      sb.append("visited:");
      if (this.visited == null) {
        sb.append("null");
      } else {
        sb.append(this.visited);
      }
      first = false;
    }
    if (isSetCalled()) {
      if (!first) sb.append(", ");
      sb.append("called:");
      if (this.called == null) {
        sb.append("null");
      } else {
        sb.append(this.called);
      }
      first = false;
    }
    if (isSetStarted()) {
      if (!first) sb.append(", ");
      sb.append("started:");
      if (this.started == null) {
        sb.append("null");
      } else {
        sb.append(this.started);
      }
      first = false;
    }
    if (isSetEnded()) {
      if (!first) sb.append(", ");
      sb.append("ended:");
      if (this.ended == null) {
        sb.append("null");
      } else {
        sb.append(this.ended);
      }
      first = false;
    }
    if (isSetDue()) {
      if (!first) sb.append(", ");
      sb.append("due:");
      if (this.due == null) {
        sb.append("null");
      } else {
        sb.append(this.due);
      }
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      if (this.deleted == null) {
        sb.append("null");
      } else {
        sb.append(this.deleted);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
    }
    if (isSetPageCount()) {
      if (!first) sb.append(", ");
      sb.append("pageCount:");
      sb.append(this.pageCount);
      first = false;
    }
    if (isSetCreators()) {
      if (!first) sb.append(", ");
      sb.append("creators:");
      if (this.creators == null) {
        sb.append("null");
      } else {
        sb.append(this.creators);
      }
      first = false;
    }
    if (isSetContributors()) {
      if (!first) sb.append(", ");
      sb.append("contributors:");
      if (this.contributors == null) {
        sb.append("null");
      } else {
        sb.append(this.contributors);
      }
      first = false;
    }
    if (isSetOrganization()) {
      if (!first) sb.append(", ");
      sb.append("organization:");
      if (this.organization == null) {
        sb.append("null");
      } else {
        sb.append(this.organization);
      }
      first = false;
    }
    if (isSetEmptyDocument()) {
      if (!first) sb.append(", ");
      sb.append("emptyDocument:");
      sb.append(this.emptyDocument);
      first = false;
    }
    if (isSetMessageID()) {
      if (!first) sb.append(", ");
      sb.append("messageID:");
      if (this.messageID == null) {
        sb.append("null");
      } else {
        sb.append(this.messageID);
      }
      first = false;
    }
    if (isSetMessageHeaders()) {
      if (!first) sb.append(", ");
      sb.append("messageHeaders:");
      if (this.messageHeaders == null) {
        sb.append("null");
      } else {
        sb.append(this.messageHeaders);
      }
      first = false;
    }
    if (isSetConversationIndexSet()) {
      if (!first) sb.append(", ");
      sb.append("conversationIndexSet:");
      if (this.conversationIndexSet == null) {
        sb.append("null");
      } else {
        sb.append(this.conversationIndexSet);
      }
      first = false;
    }
    if (isSetMessageFrom()) {
      if (!first) sb.append(", ");
      sb.append("messageFrom:");
      if (this.messageFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.messageFrom);
      }
      first = false;
    }
    if (isSetMessageSenders()) {
      if (!first) sb.append(", ");
      sb.append("messageSenders:");
      if (this.messageSenders == null) {
        sb.append("null");
      } else {
        sb.append(this.messageSenders);
      }
      first = false;
    }
    if (isSetMessageTo()) {
      if (!first) sb.append(", ");
      sb.append("messageTo:");
      if (this.messageTo == null) {
        sb.append("null");
      } else {
        sb.append(this.messageTo);
      }
      first = false;
    }
    if (isSetMessageCc()) {
      if (!first) sb.append(", ");
      sb.append("messageCc:");
      if (this.messageCc == null) {
        sb.append("null");
      } else {
        sb.append(this.messageCc);
      }
      first = false;
    }
    if (isSetMessageBcc()) {
      if (!first) sb.append(", ");
      sb.append("messageBcc:");
      if (this.messageBcc == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBcc);
      }
      first = false;
    }
    if (isSetChatSenders()) {
      if (!first) sb.append(", ");
      sb.append("chatSenders:");
      if (this.chatSenders == null) {
        sb.append("null");
      } else {
        sb.append(this.chatSenders);
      }
      first = false;
    }
    if (isSetChatReceivers()) {
      if (!first) sb.append(", ");
      sb.append("chatReceivers:");
      if (this.chatReceivers == null) {
        sb.append("null");
      } else {
        sb.append(this.chatReceivers);
      }
      first = false;
    }
    if (isSetChatAccounts()) {
      if (!first) sb.append(", ");
      sb.append("chatAccounts:");
      if (this.chatAccounts == null) {
        sb.append("null");
      } else {
        sb.append(this.chatAccounts);
      }
      first = false;
    }
    if (isSetIsRead()) {
      if (!first) sb.append(", ");
      sb.append("isRead:");
      sb.append(this.isRead);
      first = false;
    }
    if (isSetDurationSeconds()) {
      if (!first) sb.append(", ");
      sb.append("durationSeconds:");
      sb.append(this.durationSeconds);
      first = false;
    }
    if (isSetIncomingPhoneNumbers()) {
      if (!first) sb.append(", ");
      sb.append("incomingPhoneNumbers:");
      if (this.incomingPhoneNumbers == null) {
        sb.append("null");
      } else {
        sb.append(this.incomingPhoneNumbers);
      }
      first = false;
    }
    if (isSetOutgoingPhoneNumbers()) {
      if (!first) sb.append(", ");
      sb.append("outgoingPhoneNumbers:");
      if (this.outgoingPhoneNumbers == null) {
        sb.append("null");
      } else {
        sb.append(this.outgoingPhoneNumbers);
      }
      first = false;
    }
    if (isSetAllPhoneNumbers()) {
      if (!first) sb.append(", ");
      sb.append("allPhoneNumbers:");
      if (this.allPhoneNumbers == null) {
        sb.append("null");
      } else {
        sb.append(this.allPhoneNumbers);
      }
      first = false;
    }
    if (isSetSourceIP()) {
      if (!first) sb.append(", ");
      sb.append("sourceIP:");
      if (this.sourceIP == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceIP);
      }
      first = false;
    }
    if (isSetMessageCount()) {
      if (!first) sb.append(", ");
      sb.append("messageCount:");
      sb.append(this.messageCount);
      first = false;
    }
    if (isSetChatProtocol()) {
      if (!first) sb.append(", ");
      sb.append("chatProtocol:");
      if (this.chatProtocol == null) {
        sb.append("null");
      } else {
        sb.append(this.chatProtocol);
      }
      first = false;
    }
    if (isSetChatConversationId()) {
      if (!first) sb.append(", ");
      sb.append("chatConversationId:");
      if (this.chatConversationId == null) {
        sb.append("null");
      } else {
        sb.append(this.chatConversationId);
      }
      first = false;
    }
    if (isSetIntellaChatConversationId()) {
      if (!first) sb.append(", ");
      sb.append("intellaChatConversationId:");
      if (this.intellaChatConversationId == null) {
        sb.append("null");
      } else {
        sb.append(this.intellaChatConversationId);
      }
      first = false;
    }
    if (isSetChatConversationTitle()) {
      if (!first) sb.append(", ");
      sb.append("chatConversationTitle:");
      if (this.chatConversationTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.chatConversationTitle);
      }
      first = false;
    }
    if (isSetVisitedUrl()) {
      if (!first) sb.append(", ");
      sb.append("visitedUrl:");
      if (this.visitedUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.visitedUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (geoLocation != null) {
      geoLocation.validate();
    }
    if (contentCreated != null) {
      contentCreated.validate();
    }
    if (contentLastModified != null) {
      contentLastModified.validate();
    }
    if (contentLastAccessed != null) {
      contentLastAccessed.validate();
    }
    if (fileCreated != null) {
      fileCreated.validate();
    }
    if (fileLastModified != null) {
      fileLastModified.validate();
    }
    if (fileLastAccessed != null) {
      fileLastAccessed.validate();
    }
    if (lastPrinted != null) {
      lastPrinted.validate();
    }
    if (sent != null) {
      sent.validate();
    }
    if (received != null) {
      received.validate();
    }
    if (visited != null) {
      visited.validate();
    }
    if (called != null) {
      called.validate();
    }
    if (started != null) {
      started.validate();
    }
    if (ended != null) {
      ended.validate();
    }
    if (due != null) {
      due.validate();
    }
    if (deleted != null) {
      deleted.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcessedItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProcessedItemStandardScheme getScheme() {
      return new ProcessedItemStandardScheme();
    }
  }

  private static class ProcessedItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProcessedItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessedItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.md5 = iprot.readString();
              struct.setMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEDIA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaType = iprot.readString();
              struct.setMediaTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENCRYPTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.encrypted = iprot.readBool();
              struct.setEncryptedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DECRYPTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.decrypted = iprot.readBool();
              struct.setDecryptedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificate = iprot.readString();
              struct.setCertificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RAW_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.rawData = new java.util.ArrayList<RawDataEntry>(_list0.size);
                @org.apache.thrift.annotation.Nullable RawDataEntry _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RawDataEntry();
                  _elem1.read(iprot);
                  struct.rawData.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRawDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTACT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactName = iprot.readString();
              struct.setContactNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nativeID = iprot.readString();
              struct.setNativeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DOCUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentID = iprot.readString();
              struct.setDocumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARENT_DOCUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentDocumentID = iprot.readString();
              struct.setParentDocumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GEO_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.geoLocation = new GeoLocation();
              struct.geoLocation.read(iprot);
              struct.setGeoLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // END_ATTACH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endAttach = iprot.readString();
              struct.setEndAttachIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TEXT_SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textSnippet = iprot.readString();
              struct.setTextSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RECOVERED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recovered = iprot.readBool();
              struct.setRecoveredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORPHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.orphan = iprot.readBool();
              struct.setOrphanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EMBEDDED_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.embeddedImage = iprot.readBool();
              struct.setEmbeddedImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FS_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsPath = iprot.readString();
              struct.setFsPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_TOP_LEVEL_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTopLevelParent = iprot.readBool();
              struct.setIsTopLevelParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // BINARY_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryFile = iprot.readString();
              struct.setBinaryFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // TEXT_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textFile = iprot.readString();
              struct.setTextFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // CONTENT_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contentCreated = new ScriptTZonedDateTime();
              struct.contentCreated.read(iprot);
              struct.setContentCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // CONTENT_LAST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contentLastModified = new ScriptTZonedDateTime();
              struct.contentLastModified.read(iprot);
              struct.setContentLastModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // CONTENT_LAST_ACCESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contentLastAccessed = new ScriptTZonedDateTime();
              struct.contentLastAccessed.read(iprot);
              struct.setContentLastAccessedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // FILE_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fileCreated = new ScriptTZonedDateTime();
              struct.fileCreated.read(iprot);
              struct.setFileCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // FILE_LAST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fileLastModified = new ScriptTZonedDateTime();
              struct.fileLastModified.read(iprot);
              struct.setFileLastModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // FILE_LAST_ACCESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fileLastAccessed = new ScriptTZonedDateTime();
              struct.fileLastAccessed.read(iprot);
              struct.setFileLastAccessedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // LAST_PRINTED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lastPrinted = new ScriptTZonedDateTime();
              struct.lastPrinted.read(iprot);
              struct.setLastPrintedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sent = new ScriptTZonedDateTime();
              struct.sent.read(iprot);
              struct.setSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // RECEIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.received = new ScriptTZonedDateTime();
              struct.received.read(iprot);
              struct.setReceivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // VISITED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.visited = new ScriptTZonedDateTime();
              struct.visited.read(iprot);
              struct.setVisitedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // CALLED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.called = new ScriptTZonedDateTime();
              struct.called.read(iprot);
              struct.setCalledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // STARTED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.started = new ScriptTZonedDateTime();
              struct.started.read(iprot);
              struct.setStartedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // ENDED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ended = new ScriptTZonedDateTime();
              struct.ended.read(iprot);
              struct.setEndedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // DUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.due = new ScriptTZonedDateTime();
              struct.due.read(iprot);
              struct.setDueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deleted = new ScriptTZonedDateTime();
              struct.deleted.read(iprot);
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 202: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 203: // PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageCount = iprot.readI32();
              struct.setPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 204: // CREATORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.creators = new java.util.ArrayList<PersonAccount>(_list3.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new PersonAccount();
                  _elem4.read(iprot);
                  struct.creators.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCreatorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 205: // CONTRIBUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.contributors = new java.util.ArrayList<PersonAccount>(_list6.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new PersonAccount();
                  _elem7.read(iprot);
                  struct.contributors.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setContributorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 206: // ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organization = iprot.readString();
              struct.setOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 207: // EMPTY_DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.emptyDocument = iprot.readBool();
              struct.setEmptyDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 251: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageID = iprot.readString();
              struct.setMessageIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 252: // MESSAGE_HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageHeaders = iprot.readString();
              struct.setMessageHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 253: // CONVERSATION_INDEX_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.conversationIndexSet = new java.util.HashSet<java.lang.String>(2*_set9.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem10;
                for (int _i11 = 0; _i11 < _set9.size; ++_i11)
                {
                  _elem10 = iprot.readString();
                  struct.conversationIndexSet.add(_elem10);
                }
                iprot.readSetEnd();
              }
              struct.setConversationIndexSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 254: // MESSAGE_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.messageFrom = new java.util.HashSet<PersonAccount>(2*_set12.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem13;
                for (int _i14 = 0; _i14 < _set12.size; ++_i14)
                {
                  _elem13 = new PersonAccount();
                  _elem13.read(iprot);
                  struct.messageFrom.add(_elem13);
                }
                iprot.readSetEnd();
              }
              struct.setMessageFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // MESSAGE_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.messageSenders = new java.util.HashSet<PersonAccount>(2*_set15.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem16;
                for (int _i17 = 0; _i17 < _set15.size; ++_i17)
                {
                  _elem16 = new PersonAccount();
                  _elem16.read(iprot);
                  struct.messageSenders.add(_elem16);
                }
                iprot.readSetEnd();
              }
              struct.setMessageSendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 256: // MESSAGE_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.messageTo = new java.util.HashSet<PersonAccount>(2*_set18.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem19;
                for (int _i20 = 0; _i20 < _set18.size; ++_i20)
                {
                  _elem19 = new PersonAccount();
                  _elem19.read(iprot);
                  struct.messageTo.add(_elem19);
                }
                iprot.readSetEnd();
              }
              struct.setMessageToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 257: // MESSAGE_CC
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set21 = iprot.readSetBegin();
                struct.messageCc = new java.util.HashSet<PersonAccount>(2*_set21.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem22;
                for (int _i23 = 0; _i23 < _set21.size; ++_i23)
                {
                  _elem22 = new PersonAccount();
                  _elem22.read(iprot);
                  struct.messageCc.add(_elem22);
                }
                iprot.readSetEnd();
              }
              struct.setMessageCcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 258: // MESSAGE_BCC
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.messageBcc = new java.util.HashSet<PersonAccount>(2*_set24.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem25;
                for (int _i26 = 0; _i26 < _set24.size; ++_i26)
                {
                  _elem25 = new PersonAccount();
                  _elem25.read(iprot);
                  struct.messageBcc.add(_elem25);
                }
                iprot.readSetEnd();
              }
              struct.setMessageBccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 259: // CHAT_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                struct.chatSenders = new java.util.HashSet<PersonAccount>(2*_set27.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem28;
                for (int _i29 = 0; _i29 < _set27.size; ++_i29)
                {
                  _elem28 = new PersonAccount();
                  _elem28.read(iprot);
                  struct.chatSenders.add(_elem28);
                }
                iprot.readSetEnd();
              }
              struct.setChatSendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 260: // CHAT_RECEIVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                struct.chatReceivers = new java.util.HashSet<PersonAccount>(2*_set30.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem31;
                for (int _i32 = 0; _i32 < _set30.size; ++_i32)
                {
                  _elem31 = new PersonAccount();
                  _elem31.read(iprot);
                  struct.chatReceivers.add(_elem31);
                }
                iprot.readSetEnd();
              }
              struct.setChatReceiversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 261: // CHAT_ACCOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set33 = iprot.readSetBegin();
                struct.chatAccounts = new java.util.HashSet<PersonAccount>(2*_set33.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem34;
                for (int _i35 = 0; _i35 < _set33.size; ++_i35)
                {
                  _elem34 = new PersonAccount();
                  _elem34.read(iprot);
                  struct.chatAccounts.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setChatAccountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 262: // IS_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRead = iprot.readBool();
              struct.setIsReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 263: // DURATION_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.durationSeconds = iprot.readI32();
              struct.setDurationSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 264: // INCOMING_PHONE_NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set36 = iprot.readSetBegin();
                struct.incomingPhoneNumbers = new java.util.HashSet<PersonAccount>(2*_set36.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem37;
                for (int _i38 = 0; _i38 < _set36.size; ++_i38)
                {
                  _elem37 = new PersonAccount();
                  _elem37.read(iprot);
                  struct.incomingPhoneNumbers.add(_elem37);
                }
                iprot.readSetEnd();
              }
              struct.setIncomingPhoneNumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 265: // OUTGOING_PHONE_NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set39 = iprot.readSetBegin();
                struct.outgoingPhoneNumbers = new java.util.HashSet<PersonAccount>(2*_set39.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem40;
                for (int _i41 = 0; _i41 < _set39.size; ++_i41)
                {
                  _elem40 = new PersonAccount();
                  _elem40.read(iprot);
                  struct.outgoingPhoneNumbers.add(_elem40);
                }
                iprot.readSetEnd();
              }
              struct.setOutgoingPhoneNumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 266: // ALL_PHONE_NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set42 = iprot.readSetBegin();
                struct.allPhoneNumbers = new java.util.HashSet<PersonAccount>(2*_set42.size);
                @org.apache.thrift.annotation.Nullable PersonAccount _elem43;
                for (int _i44 = 0; _i44 < _set42.size; ++_i44)
                {
                  _elem43 = new PersonAccount();
                  _elem43.read(iprot);
                  struct.allPhoneNumbers.add(_elem43);
                }
                iprot.readSetEnd();
              }
              struct.setAllPhoneNumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 267: // SOURCE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceIP = iprot.readString();
              struct.setSourceIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 268: // MESSAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageCount = iprot.readI32();
              struct.setMessageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 269: // CHAT_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set45 = iprot.readSetBegin();
                struct.chatProtocol = new java.util.HashSet<java.lang.String>(2*_set45.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem46;
                for (int _i47 = 0; _i47 < _set45.size; ++_i47)
                {
                  _elem46 = iprot.readString();
                  struct.chatProtocol.add(_elem46);
                }
                iprot.readSetEnd();
              }
              struct.setChatProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 270: // CHAT_CONVERSATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatConversationId = iprot.readString();
              struct.setChatConversationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 271: // INTELLA_CHAT_CONVERSATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intellaChatConversationId = iprot.readString();
              struct.setIntellaChatConversationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 272: // CHAT_CONVERSATION_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatConversationTitle = iprot.readString();
              struct.setChatConversationTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 301: // VISITED_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.visitedUrl = iprot.readString();
              struct.setVisitedUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessedItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        if (struct.isSetFileName()) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uri != null) {
        if (struct.isSetUri()) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.md5 != null) {
        if (struct.isSetMd5()) {
          oprot.writeFieldBegin(MD5_FIELD_DESC);
          oprot.writeString(struct.md5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSize()) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI64(struct.size);
        oprot.writeFieldEnd();
      }
      if (struct.mediaType != null) {
        if (struct.isSetMediaType()) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEncrypted()) {
        oprot.writeFieldBegin(ENCRYPTED_FIELD_DESC);
        oprot.writeBool(struct.encrypted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDecrypted()) {
        oprot.writeFieldBegin(DECRYPTED_FIELD_DESC);
        oprot.writeBool(struct.decrypted);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.certificate != null) {
        if (struct.isSetCertificate()) {
          oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
          oprot.writeString(struct.certificate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rawData != null) {
        if (struct.isSetRawData()) {
          oprot.writeFieldBegin(RAW_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rawData.size()));
            for (RawDataEntry _iter48 : struct.rawData)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.contactName != null) {
        if (struct.isSetContactName()) {
          oprot.writeFieldBegin(CONTACT_NAME_FIELD_DESC);
          oprot.writeString(struct.contactName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nativeID != null) {
        if (struct.isSetNativeID()) {
          oprot.writeFieldBegin(NATIVE_ID_FIELD_DESC);
          oprot.writeString(struct.nativeID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documentID != null) {
        if (struct.isSetDocumentID()) {
          oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.documentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentDocumentID != null) {
        if (struct.isSetParentDocumentID()) {
          oprot.writeFieldBegin(PARENT_DOCUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentDocumentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.geoLocation != null) {
        if (struct.isSetGeoLocation()) {
          oprot.writeFieldBegin(GEO_LOCATION_FIELD_DESC);
          struct.geoLocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endAttach != null) {
        if (struct.isSetEndAttach()) {
          oprot.writeFieldBegin(END_ATTACH_FIELD_DESC);
          oprot.writeString(struct.endAttach);
          oprot.writeFieldEnd();
        }
      }
      if (struct.textSnippet != null) {
        if (struct.isSetTextSnippet()) {
          oprot.writeFieldBegin(TEXT_SNIPPET_FIELD_DESC);
          oprot.writeString(struct.textSnippet);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecovered()) {
        oprot.writeFieldBegin(RECOVERED_FIELD_DESC);
        oprot.writeBool(struct.recovered);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrphan()) {
        oprot.writeFieldBegin(ORPHAN_FIELD_DESC);
        oprot.writeBool(struct.orphan);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmbeddedImage()) {
        oprot.writeFieldBegin(EMBEDDED_IMAGE_FIELD_DESC);
        oprot.writeBool(struct.embeddedImage);
        oprot.writeFieldEnd();
      }
      if (struct.fsPath != null) {
        if (struct.isSetFsPath()) {
          oprot.writeFieldBegin(FS_PATH_FIELD_DESC);
          oprot.writeString(struct.fsPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsTopLevelParent()) {
        oprot.writeFieldBegin(IS_TOP_LEVEL_PARENT_FIELD_DESC);
        oprot.writeBool(struct.isTopLevelParent);
        oprot.writeFieldEnd();
      }
      if (struct.binaryFile != null) {
        if (struct.isSetBinaryFile()) {
          oprot.writeFieldBegin(BINARY_FILE_FIELD_DESC);
          oprot.writeString(struct.binaryFile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.textFile != null) {
        if (struct.isSetTextFile()) {
          oprot.writeFieldBegin(TEXT_FILE_FIELD_DESC);
          oprot.writeString(struct.textFile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentCreated != null) {
        if (struct.isSetContentCreated()) {
          oprot.writeFieldBegin(CONTENT_CREATED_FIELD_DESC);
          struct.contentCreated.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentLastModified != null) {
        if (struct.isSetContentLastModified()) {
          oprot.writeFieldBegin(CONTENT_LAST_MODIFIED_FIELD_DESC);
          struct.contentLastModified.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentLastAccessed != null) {
        if (struct.isSetContentLastAccessed()) {
          oprot.writeFieldBegin(CONTENT_LAST_ACCESSED_FIELD_DESC);
          struct.contentLastAccessed.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileCreated != null) {
        if (struct.isSetFileCreated()) {
          oprot.writeFieldBegin(FILE_CREATED_FIELD_DESC);
          struct.fileCreated.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileLastModified != null) {
        if (struct.isSetFileLastModified()) {
          oprot.writeFieldBegin(FILE_LAST_MODIFIED_FIELD_DESC);
          struct.fileLastModified.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileLastAccessed != null) {
        if (struct.isSetFileLastAccessed()) {
          oprot.writeFieldBegin(FILE_LAST_ACCESSED_FIELD_DESC);
          struct.fileLastAccessed.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastPrinted != null) {
        if (struct.isSetLastPrinted()) {
          oprot.writeFieldBegin(LAST_PRINTED_FIELD_DESC);
          struct.lastPrinted.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sent != null) {
        if (struct.isSetSent()) {
          oprot.writeFieldBegin(SENT_FIELD_DESC);
          struct.sent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.received != null) {
        if (struct.isSetReceived()) {
          oprot.writeFieldBegin(RECEIVED_FIELD_DESC);
          struct.received.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.visited != null) {
        if (struct.isSetVisited()) {
          oprot.writeFieldBegin(VISITED_FIELD_DESC);
          struct.visited.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.called != null) {
        if (struct.isSetCalled()) {
          oprot.writeFieldBegin(CALLED_FIELD_DESC);
          struct.called.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.started != null) {
        if (struct.isSetStarted()) {
          oprot.writeFieldBegin(STARTED_FIELD_DESC);
          struct.started.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ended != null) {
        if (struct.isSetEnded()) {
          oprot.writeFieldBegin(ENDED_FIELD_DESC);
          struct.ended.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.due != null) {
        if (struct.isSetDue()) {
          oprot.writeFieldBegin(DUE_FIELD_DESC);
          struct.due.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deleted != null) {
        if (struct.isSetDeleted()) {
          oprot.writeFieldBegin(DELETED_FIELD_DESC);
          struct.deleted.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPageCount()) {
        oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pageCount);
        oprot.writeFieldEnd();
      }
      if (struct.creators != null) {
        if (struct.isSetCreators()) {
          oprot.writeFieldBegin(CREATORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.creators.size()));
            for (PersonAccount _iter49 : struct.creators)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.contributors != null) {
        if (struct.isSetContributors()) {
          oprot.writeFieldBegin(CONTRIBUTORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contributors.size()));
            for (PersonAccount _iter50 : struct.contributors)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.organization != null) {
        if (struct.isSetOrganization()) {
          oprot.writeFieldBegin(ORGANIZATION_FIELD_DESC);
          oprot.writeString(struct.organization);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmptyDocument()) {
        oprot.writeFieldBegin(EMPTY_DOCUMENT_FIELD_DESC);
        oprot.writeBool(struct.emptyDocument);
        oprot.writeFieldEnd();
      }
      if (struct.messageID != null) {
        if (struct.isSetMessageID()) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageHeaders != null) {
        if (struct.isSetMessageHeaders()) {
          oprot.writeFieldBegin(MESSAGE_HEADERS_FIELD_DESC);
          oprot.writeString(struct.messageHeaders);
          oprot.writeFieldEnd();
        }
      }
      if (struct.conversationIndexSet != null) {
        if (struct.isSetConversationIndexSet()) {
          oprot.writeFieldBegin(CONVERSATION_INDEX_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.conversationIndexSet.size()));
            for (java.lang.String _iter51 : struct.conversationIndexSet)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageFrom != null) {
        if (struct.isSetMessageFrom()) {
          oprot.writeFieldBegin(MESSAGE_FROM_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.messageFrom.size()));
            for (PersonAccount _iter52 : struct.messageFrom)
            {
              _iter52.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageSenders != null) {
        if (struct.isSetMessageSenders()) {
          oprot.writeFieldBegin(MESSAGE_SENDERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.messageSenders.size()));
            for (PersonAccount _iter53 : struct.messageSenders)
            {
              _iter53.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageTo != null) {
        if (struct.isSetMessageTo()) {
          oprot.writeFieldBegin(MESSAGE_TO_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.messageTo.size()));
            for (PersonAccount _iter54 : struct.messageTo)
            {
              _iter54.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageCc != null) {
        if (struct.isSetMessageCc()) {
          oprot.writeFieldBegin(MESSAGE_CC_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.messageCc.size()));
            for (PersonAccount _iter55 : struct.messageCc)
            {
              _iter55.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageBcc != null) {
        if (struct.isSetMessageBcc()) {
          oprot.writeFieldBegin(MESSAGE_BCC_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.messageBcc.size()));
            for (PersonAccount _iter56 : struct.messageBcc)
            {
              _iter56.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatSenders != null) {
        if (struct.isSetChatSenders()) {
          oprot.writeFieldBegin(CHAT_SENDERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.chatSenders.size()));
            for (PersonAccount _iter57 : struct.chatSenders)
            {
              _iter57.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatReceivers != null) {
        if (struct.isSetChatReceivers()) {
          oprot.writeFieldBegin(CHAT_RECEIVERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.chatReceivers.size()));
            for (PersonAccount _iter58 : struct.chatReceivers)
            {
              _iter58.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatAccounts != null) {
        if (struct.isSetChatAccounts()) {
          oprot.writeFieldBegin(CHAT_ACCOUNTS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.chatAccounts.size()));
            for (PersonAccount _iter59 : struct.chatAccounts)
            {
              _iter59.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRead()) {
        oprot.writeFieldBegin(IS_READ_FIELD_DESC);
        oprot.writeBool(struct.isRead);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDurationSeconds()) {
        oprot.writeFieldBegin(DURATION_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.durationSeconds);
        oprot.writeFieldEnd();
      }
      if (struct.incomingPhoneNumbers != null) {
        if (struct.isSetIncomingPhoneNumbers()) {
          oprot.writeFieldBegin(INCOMING_PHONE_NUMBERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.incomingPhoneNumbers.size()));
            for (PersonAccount _iter60 : struct.incomingPhoneNumbers)
            {
              _iter60.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outgoingPhoneNumbers != null) {
        if (struct.isSetOutgoingPhoneNumbers()) {
          oprot.writeFieldBegin(OUTGOING_PHONE_NUMBERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.outgoingPhoneNumbers.size()));
            for (PersonAccount _iter61 : struct.outgoingPhoneNumbers)
            {
              _iter61.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.allPhoneNumbers != null) {
        if (struct.isSetAllPhoneNumbers()) {
          oprot.writeFieldBegin(ALL_PHONE_NUMBERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.allPhoneNumbers.size()));
            for (PersonAccount _iter62 : struct.allPhoneNumbers)
            {
              _iter62.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceIP != null) {
        if (struct.isSetSourceIP()) {
          oprot.writeFieldBegin(SOURCE_IP_FIELD_DESC);
          oprot.writeString(struct.sourceIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMessageCount()) {
        oprot.writeFieldBegin(MESSAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.messageCount);
        oprot.writeFieldEnd();
      }
      if (struct.chatProtocol != null) {
        if (struct.isSetChatProtocol()) {
          oprot.writeFieldBegin(CHAT_PROTOCOL_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.chatProtocol.size()));
            for (java.lang.String _iter63 : struct.chatProtocol)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatConversationId != null) {
        if (struct.isSetChatConversationId()) {
          oprot.writeFieldBegin(CHAT_CONVERSATION_ID_FIELD_DESC);
          oprot.writeString(struct.chatConversationId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.intellaChatConversationId != null) {
        if (struct.isSetIntellaChatConversationId()) {
          oprot.writeFieldBegin(INTELLA_CHAT_CONVERSATION_ID_FIELD_DESC);
          oprot.writeString(struct.intellaChatConversationId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatConversationTitle != null) {
        if (struct.isSetChatConversationTitle()) {
          oprot.writeFieldBegin(CHAT_CONVERSATION_TITLE_FIELD_DESC);
          oprot.writeString(struct.chatConversationTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.visitedUrl != null) {
        if (struct.isSetVisitedUrl()) {
          oprot.writeFieldBegin(VISITED_URL_FIELD_DESC);
          oprot.writeString(struct.visitedUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcessedItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProcessedItemTupleScheme getScheme() {
      return new ProcessedItemTupleScheme();
    }
  }

  private static class ProcessedItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProcessedItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcessedItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFileName()) {
        optionals.set(1);
      }
      if (struct.isSetUri()) {
        optionals.set(2);
      }
      if (struct.isSetMd5()) {
        optionals.set(3);
      }
      if (struct.isSetSize()) {
        optionals.set(4);
      }
      if (struct.isSetMediaType()) {
        optionals.set(5);
      }
      if (struct.isSetEncrypted()) {
        optionals.set(6);
      }
      if (struct.isSetDecrypted()) {
        optionals.set(7);
      }
      if (struct.isSetPassword()) {
        optionals.set(8);
      }
      if (struct.isSetCertificate()) {
        optionals.set(9);
      }
      if (struct.isSetRawData()) {
        optionals.set(10);
      }
      if (struct.isSetContactName()) {
        optionals.set(11);
      }
      if (struct.isSetNativeID()) {
        optionals.set(12);
      }
      if (struct.isSetDocumentID()) {
        optionals.set(13);
      }
      if (struct.isSetParentDocumentID()) {
        optionals.set(14);
      }
      if (struct.isSetGeoLocation()) {
        optionals.set(15);
      }
      if (struct.isSetEndAttach()) {
        optionals.set(16);
      }
      if (struct.isSetTextSnippet()) {
        optionals.set(17);
      }
      if (struct.isSetRecovered()) {
        optionals.set(18);
      }
      if (struct.isSetOrphan()) {
        optionals.set(19);
      }
      if (struct.isSetEmbeddedImage()) {
        optionals.set(20);
      }
      if (struct.isSetFsPath()) {
        optionals.set(21);
      }
      if (struct.isSetIsTopLevelParent()) {
        optionals.set(22);
      }
      if (struct.isSetBinaryFile()) {
        optionals.set(23);
      }
      if (struct.isSetTextFile()) {
        optionals.set(24);
      }
      if (struct.isSetContentCreated()) {
        optionals.set(25);
      }
      if (struct.isSetContentLastModified()) {
        optionals.set(26);
      }
      if (struct.isSetContentLastAccessed()) {
        optionals.set(27);
      }
      if (struct.isSetFileCreated()) {
        optionals.set(28);
      }
      if (struct.isSetFileLastModified()) {
        optionals.set(29);
      }
      if (struct.isSetFileLastAccessed()) {
        optionals.set(30);
      }
      if (struct.isSetLastPrinted()) {
        optionals.set(31);
      }
      if (struct.isSetSent()) {
        optionals.set(32);
      }
      if (struct.isSetReceived()) {
        optionals.set(33);
      }
      if (struct.isSetVisited()) {
        optionals.set(34);
      }
      if (struct.isSetCalled()) {
        optionals.set(35);
      }
      if (struct.isSetStarted()) {
        optionals.set(36);
      }
      if (struct.isSetEnded()) {
        optionals.set(37);
      }
      if (struct.isSetDue()) {
        optionals.set(38);
      }
      if (struct.isSetDeleted()) {
        optionals.set(39);
      }
      if (struct.isSetTitle()) {
        optionals.set(40);
      }
      if (struct.isSetSubject()) {
        optionals.set(41);
      }
      if (struct.isSetPageCount()) {
        optionals.set(42);
      }
      if (struct.isSetCreators()) {
        optionals.set(43);
      }
      if (struct.isSetContributors()) {
        optionals.set(44);
      }
      if (struct.isSetOrganization()) {
        optionals.set(45);
      }
      if (struct.isSetEmptyDocument()) {
        optionals.set(46);
      }
      if (struct.isSetMessageID()) {
        optionals.set(47);
      }
      if (struct.isSetMessageHeaders()) {
        optionals.set(48);
      }
      if (struct.isSetConversationIndexSet()) {
        optionals.set(49);
      }
      if (struct.isSetMessageFrom()) {
        optionals.set(50);
      }
      if (struct.isSetMessageSenders()) {
        optionals.set(51);
      }
      if (struct.isSetMessageTo()) {
        optionals.set(52);
      }
      if (struct.isSetMessageCc()) {
        optionals.set(53);
      }
      if (struct.isSetMessageBcc()) {
        optionals.set(54);
      }
      if (struct.isSetChatSenders()) {
        optionals.set(55);
      }
      if (struct.isSetChatReceivers()) {
        optionals.set(56);
      }
      if (struct.isSetChatAccounts()) {
        optionals.set(57);
      }
      if (struct.isSetIsRead()) {
        optionals.set(58);
      }
      if (struct.isSetDurationSeconds()) {
        optionals.set(59);
      }
      if (struct.isSetIncomingPhoneNumbers()) {
        optionals.set(60);
      }
      if (struct.isSetOutgoingPhoneNumbers()) {
        optionals.set(61);
      }
      if (struct.isSetAllPhoneNumbers()) {
        optionals.set(62);
      }
      if (struct.isSetSourceIP()) {
        optionals.set(63);
      }
      if (struct.isSetMessageCount()) {
        optionals.set(64);
      }
      if (struct.isSetChatProtocol()) {
        optionals.set(65);
      }
      if (struct.isSetChatConversationId()) {
        optionals.set(66);
      }
      if (struct.isSetIntellaChatConversationId()) {
        optionals.set(67);
      }
      if (struct.isSetChatConversationTitle()) {
        optionals.set(68);
      }
      if (struct.isSetVisitedUrl()) {
        optionals.set(69);
      }
      oprot.writeBitSet(optionals, 70);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetMd5()) {
        oprot.writeString(struct.md5);
      }
      if (struct.isSetSize()) {
        oprot.writeI64(struct.size);
      }
      if (struct.isSetMediaType()) {
        oprot.writeString(struct.mediaType);
      }
      if (struct.isSetEncrypted()) {
        oprot.writeBool(struct.encrypted);
      }
      if (struct.isSetDecrypted()) {
        oprot.writeBool(struct.decrypted);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetCertificate()) {
        oprot.writeString(struct.certificate);
      }
      if (struct.isSetRawData()) {
        {
          oprot.writeI32(struct.rawData.size());
          for (RawDataEntry _iter64 : struct.rawData)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetContactName()) {
        oprot.writeString(struct.contactName);
      }
      if (struct.isSetNativeID()) {
        oprot.writeString(struct.nativeID);
      }
      if (struct.isSetDocumentID()) {
        oprot.writeString(struct.documentID);
      }
      if (struct.isSetParentDocumentID()) {
        oprot.writeString(struct.parentDocumentID);
      }
      if (struct.isSetGeoLocation()) {
        struct.geoLocation.write(oprot);
      }
      if (struct.isSetEndAttach()) {
        oprot.writeString(struct.endAttach);
      }
      if (struct.isSetTextSnippet()) {
        oprot.writeString(struct.textSnippet);
      }
      if (struct.isSetRecovered()) {
        oprot.writeBool(struct.recovered);
      }
      if (struct.isSetOrphan()) {
        oprot.writeBool(struct.orphan);
      }
      if (struct.isSetEmbeddedImage()) {
        oprot.writeBool(struct.embeddedImage);
      }
      if (struct.isSetFsPath()) {
        oprot.writeString(struct.fsPath);
      }
      if (struct.isSetIsTopLevelParent()) {
        oprot.writeBool(struct.isTopLevelParent);
      }
      if (struct.isSetBinaryFile()) {
        oprot.writeString(struct.binaryFile);
      }
      if (struct.isSetTextFile()) {
        oprot.writeString(struct.textFile);
      }
      if (struct.isSetContentCreated()) {
        struct.contentCreated.write(oprot);
      }
      if (struct.isSetContentLastModified()) {
        struct.contentLastModified.write(oprot);
      }
      if (struct.isSetContentLastAccessed()) {
        struct.contentLastAccessed.write(oprot);
      }
      if (struct.isSetFileCreated()) {
        struct.fileCreated.write(oprot);
      }
      if (struct.isSetFileLastModified()) {
        struct.fileLastModified.write(oprot);
      }
      if (struct.isSetFileLastAccessed()) {
        struct.fileLastAccessed.write(oprot);
      }
      if (struct.isSetLastPrinted()) {
        struct.lastPrinted.write(oprot);
      }
      if (struct.isSetSent()) {
        struct.sent.write(oprot);
      }
      if (struct.isSetReceived()) {
        struct.received.write(oprot);
      }
      if (struct.isSetVisited()) {
        struct.visited.write(oprot);
      }
      if (struct.isSetCalled()) {
        struct.called.write(oprot);
      }
      if (struct.isSetStarted()) {
        struct.started.write(oprot);
      }
      if (struct.isSetEnded()) {
        struct.ended.write(oprot);
      }
      if (struct.isSetDue()) {
        struct.due.write(oprot);
      }
      if (struct.isSetDeleted()) {
        struct.deleted.write(oprot);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetPageCount()) {
        oprot.writeI32(struct.pageCount);
      }
      if (struct.isSetCreators()) {
        {
          oprot.writeI32(struct.creators.size());
          for (PersonAccount _iter65 : struct.creators)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetContributors()) {
        {
          oprot.writeI32(struct.contributors.size());
          for (PersonAccount _iter66 : struct.contributors)
          {
            _iter66.write(oprot);
          }
        }
      }
      if (struct.isSetOrganization()) {
        oprot.writeString(struct.organization);
      }
      if (struct.isSetEmptyDocument()) {
        oprot.writeBool(struct.emptyDocument);
      }
      if (struct.isSetMessageID()) {
        oprot.writeString(struct.messageID);
      }
      if (struct.isSetMessageHeaders()) {
        oprot.writeString(struct.messageHeaders);
      }
      if (struct.isSetConversationIndexSet()) {
        {
          oprot.writeI32(struct.conversationIndexSet.size());
          for (java.lang.String _iter67 : struct.conversationIndexSet)
          {
            oprot.writeString(_iter67);
          }
        }
      }
      if (struct.isSetMessageFrom()) {
        {
          oprot.writeI32(struct.messageFrom.size());
          for (PersonAccount _iter68 : struct.messageFrom)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetMessageSenders()) {
        {
          oprot.writeI32(struct.messageSenders.size());
          for (PersonAccount _iter69 : struct.messageSenders)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetMessageTo()) {
        {
          oprot.writeI32(struct.messageTo.size());
          for (PersonAccount _iter70 : struct.messageTo)
          {
            _iter70.write(oprot);
          }
        }
      }
      if (struct.isSetMessageCc()) {
        {
          oprot.writeI32(struct.messageCc.size());
          for (PersonAccount _iter71 : struct.messageCc)
          {
            _iter71.write(oprot);
          }
        }
      }
      if (struct.isSetMessageBcc()) {
        {
          oprot.writeI32(struct.messageBcc.size());
          for (PersonAccount _iter72 : struct.messageBcc)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetChatSenders()) {
        {
          oprot.writeI32(struct.chatSenders.size());
          for (PersonAccount _iter73 : struct.chatSenders)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetChatReceivers()) {
        {
          oprot.writeI32(struct.chatReceivers.size());
          for (PersonAccount _iter74 : struct.chatReceivers)
          {
            _iter74.write(oprot);
          }
        }
      }
      if (struct.isSetChatAccounts()) {
        {
          oprot.writeI32(struct.chatAccounts.size());
          for (PersonAccount _iter75 : struct.chatAccounts)
          {
            _iter75.write(oprot);
          }
        }
      }
      if (struct.isSetIsRead()) {
        oprot.writeBool(struct.isRead);
      }
      if (struct.isSetDurationSeconds()) {
        oprot.writeI32(struct.durationSeconds);
      }
      if (struct.isSetIncomingPhoneNumbers()) {
        {
          oprot.writeI32(struct.incomingPhoneNumbers.size());
          for (PersonAccount _iter76 : struct.incomingPhoneNumbers)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetOutgoingPhoneNumbers()) {
        {
          oprot.writeI32(struct.outgoingPhoneNumbers.size());
          for (PersonAccount _iter77 : struct.outgoingPhoneNumbers)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetAllPhoneNumbers()) {
        {
          oprot.writeI32(struct.allPhoneNumbers.size());
          for (PersonAccount _iter78 : struct.allPhoneNumbers)
          {
            _iter78.write(oprot);
          }
        }
      }
      if (struct.isSetSourceIP()) {
        oprot.writeString(struct.sourceIP);
      }
      if (struct.isSetMessageCount()) {
        oprot.writeI32(struct.messageCount);
      }
      if (struct.isSetChatProtocol()) {
        {
          oprot.writeI32(struct.chatProtocol.size());
          for (java.lang.String _iter79 : struct.chatProtocol)
          {
            oprot.writeString(_iter79);
          }
        }
      }
      if (struct.isSetChatConversationId()) {
        oprot.writeString(struct.chatConversationId);
      }
      if (struct.isSetIntellaChatConversationId()) {
        oprot.writeString(struct.intellaChatConversationId);
      }
      if (struct.isSetChatConversationTitle()) {
        oprot.writeString(struct.chatConversationTitle);
      }
      if (struct.isSetVisitedUrl()) {
        oprot.writeString(struct.visitedUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcessedItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(70);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(3)) {
        struct.md5 = iprot.readString();
        struct.setMd5IsSet(true);
      }
      if (incoming.get(4)) {
        struct.size = iprot.readI64();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mediaType = iprot.readString();
        struct.setMediaTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.encrypted = iprot.readBool();
        struct.setEncryptedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.decrypted = iprot.readBool();
        struct.setDecryptedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(9)) {
        struct.certificate = iprot.readString();
        struct.setCertificateIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list80 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.rawData = new java.util.ArrayList<RawDataEntry>(_list80.size);
          @org.apache.thrift.annotation.Nullable RawDataEntry _elem81;
          for (int _i82 = 0; _i82 < _list80.size; ++_i82)
          {
            _elem81 = new RawDataEntry();
            _elem81.read(iprot);
            struct.rawData.add(_elem81);
          }
        }
        struct.setRawDataIsSet(true);
      }
      if (incoming.get(11)) {
        struct.contactName = iprot.readString();
        struct.setContactNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nativeID = iprot.readString();
        struct.setNativeIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.documentID = iprot.readString();
        struct.setDocumentIDIsSet(true);
      }
      if (incoming.get(14)) {
        struct.parentDocumentID = iprot.readString();
        struct.setParentDocumentIDIsSet(true);
      }
      if (incoming.get(15)) {
        struct.geoLocation = new GeoLocation();
        struct.geoLocation.read(iprot);
        struct.setGeoLocationIsSet(true);
      }
      if (incoming.get(16)) {
        struct.endAttach = iprot.readString();
        struct.setEndAttachIsSet(true);
      }
      if (incoming.get(17)) {
        struct.textSnippet = iprot.readString();
        struct.setTextSnippetIsSet(true);
      }
      if (incoming.get(18)) {
        struct.recovered = iprot.readBool();
        struct.setRecoveredIsSet(true);
      }
      if (incoming.get(19)) {
        struct.orphan = iprot.readBool();
        struct.setOrphanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.embeddedImage = iprot.readBool();
        struct.setEmbeddedImageIsSet(true);
      }
      if (incoming.get(21)) {
        struct.fsPath = iprot.readString();
        struct.setFsPathIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isTopLevelParent = iprot.readBool();
        struct.setIsTopLevelParentIsSet(true);
      }
      if (incoming.get(23)) {
        struct.binaryFile = iprot.readString();
        struct.setBinaryFileIsSet(true);
      }
      if (incoming.get(24)) {
        struct.textFile = iprot.readString();
        struct.setTextFileIsSet(true);
      }
      if (incoming.get(25)) {
        struct.contentCreated = new ScriptTZonedDateTime();
        struct.contentCreated.read(iprot);
        struct.setContentCreatedIsSet(true);
      }
      if (incoming.get(26)) {
        struct.contentLastModified = new ScriptTZonedDateTime();
        struct.contentLastModified.read(iprot);
        struct.setContentLastModifiedIsSet(true);
      }
      if (incoming.get(27)) {
        struct.contentLastAccessed = new ScriptTZonedDateTime();
        struct.contentLastAccessed.read(iprot);
        struct.setContentLastAccessedIsSet(true);
      }
      if (incoming.get(28)) {
        struct.fileCreated = new ScriptTZonedDateTime();
        struct.fileCreated.read(iprot);
        struct.setFileCreatedIsSet(true);
      }
      if (incoming.get(29)) {
        struct.fileLastModified = new ScriptTZonedDateTime();
        struct.fileLastModified.read(iprot);
        struct.setFileLastModifiedIsSet(true);
      }
      if (incoming.get(30)) {
        struct.fileLastAccessed = new ScriptTZonedDateTime();
        struct.fileLastAccessed.read(iprot);
        struct.setFileLastAccessedIsSet(true);
      }
      if (incoming.get(31)) {
        struct.lastPrinted = new ScriptTZonedDateTime();
        struct.lastPrinted.read(iprot);
        struct.setLastPrintedIsSet(true);
      }
      if (incoming.get(32)) {
        struct.sent = new ScriptTZonedDateTime();
        struct.sent.read(iprot);
        struct.setSentIsSet(true);
      }
      if (incoming.get(33)) {
        struct.received = new ScriptTZonedDateTime();
        struct.received.read(iprot);
        struct.setReceivedIsSet(true);
      }
      if (incoming.get(34)) {
        struct.visited = new ScriptTZonedDateTime();
        struct.visited.read(iprot);
        struct.setVisitedIsSet(true);
      }
      if (incoming.get(35)) {
        struct.called = new ScriptTZonedDateTime();
        struct.called.read(iprot);
        struct.setCalledIsSet(true);
      }
      if (incoming.get(36)) {
        struct.started = new ScriptTZonedDateTime();
        struct.started.read(iprot);
        struct.setStartedIsSet(true);
      }
      if (incoming.get(37)) {
        struct.ended = new ScriptTZonedDateTime();
        struct.ended.read(iprot);
        struct.setEndedIsSet(true);
      }
      if (incoming.get(38)) {
        struct.due = new ScriptTZonedDateTime();
        struct.due.read(iprot);
        struct.setDueIsSet(true);
      }
      if (incoming.get(39)) {
        struct.deleted = new ScriptTZonedDateTime();
        struct.deleted.read(iprot);
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(40)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(41)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(42)) {
        struct.pageCount = iprot.readI32();
        struct.setPageCountIsSet(true);
      }
      if (incoming.get(43)) {
        {
          org.apache.thrift.protocol.TList _list83 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.creators = new java.util.ArrayList<PersonAccount>(_list83.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem84;
          for (int _i85 = 0; _i85 < _list83.size; ++_i85)
          {
            _elem84 = new PersonAccount();
            _elem84.read(iprot);
            struct.creators.add(_elem84);
          }
        }
        struct.setCreatorsIsSet(true);
      }
      if (incoming.get(44)) {
        {
          org.apache.thrift.protocol.TList _list86 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.contributors = new java.util.ArrayList<PersonAccount>(_list86.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem87;
          for (int _i88 = 0; _i88 < _list86.size; ++_i88)
          {
            _elem87 = new PersonAccount();
            _elem87.read(iprot);
            struct.contributors.add(_elem87);
          }
        }
        struct.setContributorsIsSet(true);
      }
      if (incoming.get(45)) {
        struct.organization = iprot.readString();
        struct.setOrganizationIsSet(true);
      }
      if (incoming.get(46)) {
        struct.emptyDocument = iprot.readBool();
        struct.setEmptyDocumentIsSet(true);
      }
      if (incoming.get(47)) {
        struct.messageID = iprot.readString();
        struct.setMessageIDIsSet(true);
      }
      if (incoming.get(48)) {
        struct.messageHeaders = iprot.readString();
        struct.setMessageHeadersIsSet(true);
      }
      if (incoming.get(49)) {
        {
          org.apache.thrift.protocol.TSet _set89 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.conversationIndexSet = new java.util.HashSet<java.lang.String>(2*_set89.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem90;
          for (int _i91 = 0; _i91 < _set89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.conversationIndexSet.add(_elem90);
          }
        }
        struct.setConversationIndexSetIsSet(true);
      }
      if (incoming.get(50)) {
        {
          org.apache.thrift.protocol.TSet _set92 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messageFrom = new java.util.HashSet<PersonAccount>(2*_set92.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem93;
          for (int _i94 = 0; _i94 < _set92.size; ++_i94)
          {
            _elem93 = new PersonAccount();
            _elem93.read(iprot);
            struct.messageFrom.add(_elem93);
          }
        }
        struct.setMessageFromIsSet(true);
      }
      if (incoming.get(51)) {
        {
          org.apache.thrift.protocol.TSet _set95 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messageSenders = new java.util.HashSet<PersonAccount>(2*_set95.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem96;
          for (int _i97 = 0; _i97 < _set95.size; ++_i97)
          {
            _elem96 = new PersonAccount();
            _elem96.read(iprot);
            struct.messageSenders.add(_elem96);
          }
        }
        struct.setMessageSendersIsSet(true);
      }
      if (incoming.get(52)) {
        {
          org.apache.thrift.protocol.TSet _set98 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messageTo = new java.util.HashSet<PersonAccount>(2*_set98.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem99;
          for (int _i100 = 0; _i100 < _set98.size; ++_i100)
          {
            _elem99 = new PersonAccount();
            _elem99.read(iprot);
            struct.messageTo.add(_elem99);
          }
        }
        struct.setMessageToIsSet(true);
      }
      if (incoming.get(53)) {
        {
          org.apache.thrift.protocol.TSet _set101 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messageCc = new java.util.HashSet<PersonAccount>(2*_set101.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem102;
          for (int _i103 = 0; _i103 < _set101.size; ++_i103)
          {
            _elem102 = new PersonAccount();
            _elem102.read(iprot);
            struct.messageCc.add(_elem102);
          }
        }
        struct.setMessageCcIsSet(true);
      }
      if (incoming.get(54)) {
        {
          org.apache.thrift.protocol.TSet _set104 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messageBcc = new java.util.HashSet<PersonAccount>(2*_set104.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem105;
          for (int _i106 = 0; _i106 < _set104.size; ++_i106)
          {
            _elem105 = new PersonAccount();
            _elem105.read(iprot);
            struct.messageBcc.add(_elem105);
          }
        }
        struct.setMessageBccIsSet(true);
      }
      if (incoming.get(55)) {
        {
          org.apache.thrift.protocol.TSet _set107 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.chatSenders = new java.util.HashSet<PersonAccount>(2*_set107.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem108;
          for (int _i109 = 0; _i109 < _set107.size; ++_i109)
          {
            _elem108 = new PersonAccount();
            _elem108.read(iprot);
            struct.chatSenders.add(_elem108);
          }
        }
        struct.setChatSendersIsSet(true);
      }
      if (incoming.get(56)) {
        {
          org.apache.thrift.protocol.TSet _set110 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.chatReceivers = new java.util.HashSet<PersonAccount>(2*_set110.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem111;
          for (int _i112 = 0; _i112 < _set110.size; ++_i112)
          {
            _elem111 = new PersonAccount();
            _elem111.read(iprot);
            struct.chatReceivers.add(_elem111);
          }
        }
        struct.setChatReceiversIsSet(true);
      }
      if (incoming.get(57)) {
        {
          org.apache.thrift.protocol.TSet _set113 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.chatAccounts = new java.util.HashSet<PersonAccount>(2*_set113.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem114;
          for (int _i115 = 0; _i115 < _set113.size; ++_i115)
          {
            _elem114 = new PersonAccount();
            _elem114.read(iprot);
            struct.chatAccounts.add(_elem114);
          }
        }
        struct.setChatAccountsIsSet(true);
      }
      if (incoming.get(58)) {
        struct.isRead = iprot.readBool();
        struct.setIsReadIsSet(true);
      }
      if (incoming.get(59)) {
        struct.durationSeconds = iprot.readI32();
        struct.setDurationSecondsIsSet(true);
      }
      if (incoming.get(60)) {
        {
          org.apache.thrift.protocol.TSet _set116 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.incomingPhoneNumbers = new java.util.HashSet<PersonAccount>(2*_set116.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem117;
          for (int _i118 = 0; _i118 < _set116.size; ++_i118)
          {
            _elem117 = new PersonAccount();
            _elem117.read(iprot);
            struct.incomingPhoneNumbers.add(_elem117);
          }
        }
        struct.setIncomingPhoneNumbersIsSet(true);
      }
      if (incoming.get(61)) {
        {
          org.apache.thrift.protocol.TSet _set119 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.outgoingPhoneNumbers = new java.util.HashSet<PersonAccount>(2*_set119.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem120;
          for (int _i121 = 0; _i121 < _set119.size; ++_i121)
          {
            _elem120 = new PersonAccount();
            _elem120.read(iprot);
            struct.outgoingPhoneNumbers.add(_elem120);
          }
        }
        struct.setOutgoingPhoneNumbersIsSet(true);
      }
      if (incoming.get(62)) {
        {
          org.apache.thrift.protocol.TSet _set122 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.allPhoneNumbers = new java.util.HashSet<PersonAccount>(2*_set122.size);
          @org.apache.thrift.annotation.Nullable PersonAccount _elem123;
          for (int _i124 = 0; _i124 < _set122.size; ++_i124)
          {
            _elem123 = new PersonAccount();
            _elem123.read(iprot);
            struct.allPhoneNumbers.add(_elem123);
          }
        }
        struct.setAllPhoneNumbersIsSet(true);
      }
      if (incoming.get(63)) {
        struct.sourceIP = iprot.readString();
        struct.setSourceIPIsSet(true);
      }
      if (incoming.get(64)) {
        struct.messageCount = iprot.readI32();
        struct.setMessageCountIsSet(true);
      }
      if (incoming.get(65)) {
        {
          org.apache.thrift.protocol.TSet _set125 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.chatProtocol = new java.util.HashSet<java.lang.String>(2*_set125.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem126;
          for (int _i127 = 0; _i127 < _set125.size; ++_i127)
          {
            _elem126 = iprot.readString();
            struct.chatProtocol.add(_elem126);
          }
        }
        struct.setChatProtocolIsSet(true);
      }
      if (incoming.get(66)) {
        struct.chatConversationId = iprot.readString();
        struct.setChatConversationIdIsSet(true);
      }
      if (incoming.get(67)) {
        struct.intellaChatConversationId = iprot.readString();
        struct.setIntellaChatConversationIdIsSet(true);
      }
      if (incoming.get(68)) {
        struct.chatConversationTitle = iprot.readString();
        struct.setChatConversationTitleIsSet(true);
      }
      if (incoming.get(69)) {
        struct.visitedUrl = iprot.readString();
        struct.setVisitedUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

